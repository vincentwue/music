{"version":3,"sources":["components/Sheet/Sheet.module.css","defs/configs/settings.ts","defs/helper.ts","defs/bar.ts","defs/configs/configs.ts","defs/notes.ts","defs/intervals.ts","defs/specificIntervals.ts","defs/chords.ts","defs/scales.ts","defs/specificChords.ts","defs/specificScales.ts","defs/tune.ts","defs/progressions.ts","defs/part.ts","defs/mainController.ts","components/useRerenderOnSubscribableChange.ts","components/PartConfig/PartConfig.tsx","defs/BpmRunner.ts","components/Sheet/Sheet.tsx","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/PartConfig/PartConfig.module.css","components/Main/main.module.css"],"names":["module","exports","ConfigValue","UserInput","SettingType","Setting","value","type","name","onSettingChanged","Subject","_value","this","console","log","next","NumberSetting","min","max","ConfigValueSetting","BooleanSetting","randomIntFromInterval","Math","floor","random","randomFromArray","array","not","filterArray","filter","e","includes","length","withProbability","equation","None","Rare","Medium","WellDone","Insane","getScaleFromNote","n","notes","noteIndex","indexOf","slice","createNumberArray","start","finish","res","i","push","SettingName","BarsCreator","bars","config","AlwaysHaveChordOnFirstQuarter","every","bar","some","MaxChordsPerBar","chordProgression","barChords","divideChordsToBars","map","fillChordsWithNull","doesBarChordsFullfillAllConditions","result","Bar","error","copiedChords","chords","HowManyBars","randomHowMany","MinChordsPerBar","newBar","chordsPerBar","randomIndex","ScaleType","RandomConfig","JazzyProgressionness","CircleOfFifthMaxCloseness","UseAlwaysMajorThirdOnStep3","ChordComplexity","KeyChange","EndWith6Or1","DoNotUseStep7","UseHarmonicMinorFromStep6","UserMelodicMinorFromStep3","RhythmCrzyness","EmptyBars","Object","entries","SubscribableRandomConfig","onChange","setting","subscribe","Note","flat","sharp","id","scaleType","Sharp","Notes","note","C","F","Bb","Eb","Ab","Db","Gb","Flat","D","E","G","A","B","values","Interval","steps","standardSymbol","Intervals","PerfectUnison","MinorSecond","MajorSecond","MinorThird","MajorThird","PerfectForth","Tritone","PerfectFifth","MinorSixth","MajorSixth","MinorSeventh","MajorSeventh","IntervalDirection","intervals","SpecificInterval","root","target","direction","Up","interval","intervalBetweenNotes","rootIndex","targetIndex","rootNote","Chord","calculateInterval","Chords","Minor","MinorB5","Major","Major7","Chord7","Minor7","Minor7b5","Chord7b9","Chord7Sharp5","Chord7Sharp11","PowerChord","MajorB13","Dim7","b9b13","MinorMajor7","Minor6","Major6","Minorb6","Majorb6","Minor9","Major9","Minorb9","Majorb9","Sus4","NineSus4","Major7b6","Scale","modes","stepsMapped","tmp","step","Scales","scales","HarmonicMinor","MelodicMinor","specificScales","SpecificScale","Random","scale","mode","triads","tetrads","allChords","calculateScaleNotes","addTetrads","addTriads","addCrazyChords","render","calcNotes","scaleNotes","chordIntervals","chordNote","foundChord","chord","specificChord","SpecificChord","resultChords","isPresentInNotes","maxCloseness","jumpFifhts","FifthJump","FourthJump","last","progression","j","PartIndex","context","specialContext","calculateNotesForChord","presentIn","generateSpecificScales","presentInScales","withContext","modeString","modeStringWithRoot","join","ChordProgression","counter_251","twoFiveOnes","chordsCount","ChordProgressionCreator","part","barsCount","twoFiveOne","getStepTetrad","newChord","getRandomTetrad","getRandomTriad","Part","lastPart","index","subscribableConfig","init","createChordProgression","mapChordsToBars","getCloseCircleOfFifthsScale","Tune","parts","partOrder","addPart","forEach","howMany","newPartsOrder","rebuildParts","newPart","p","MainController","tune","useRerenderOnSubscribableChange","subscribable","useState","counter","setCounter","useEffect","sub","unsubscribe","PartConfig","props","className","classes","container","onClick","entry","str","split","letter","idx","toUpperCase","toLowerCase","replaceAll","input","checked","parseFloat","toString","info","resultName","getTimeInterval","bpm","BpmRunner","beforeNext","_renderCount","_bpm","_timeInterval","_runningInterval","_beforeNext","_startInterval","clearInterval","_rerender","allPositions","position","chordInBar","isLastOne","setInterval","runner","Sheet","partsInOrder","reduce","prev","concat","getPosition","presentInScalesAsString","isCurrentPosition","title","currentPosition","style","display","stop","Main","partsString","setPartsString","headBar","order","onBlur","newPartOrder","s","setPartOrder","randomPartsOrder","row","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,IAAM,mBAAmB,MAAQ,qBAAqB,gBAAkB,iC,qFCGnHC,EASAC,EAgBAC,E,oGAzBAF,K,YAAAA,E,YAAAA,E,gBAAAA,E,qBAAAA,E,iBAAAA,M,cASAC,K,oBAAAA,E,gBAAAA,E,iCAAAA,M,cAgBAC,K,wCAAAA,E,8BAAAA,E,iCAAAA,M,KAOL,IAAeC,EAAtB,WAOI,WAAYC,EAAUC,EAAkBC,GAAmB,yBAL3DD,UAK0D,OAJ1DE,iBAA+B,IAAIC,IAIuB,KAH1DC,YAG0D,OAF1DH,UAE0D,EACtDI,KAAKD,OAASL,EACdM,KAAKL,KAAOA,EACZK,KAAKJ,KAAOA,EAVpB,uCAmBI,WACI,OAAOI,KAAKD,QApBpB,IAaI,SAAUL,GACNM,KAAKD,OAASL,EACdO,QAAQC,IAAI,YAAaR,GACzBM,KAAKH,iBAAiBM,KAAKT,OAhBnC,KA4BaU,EAAb,kDAKI,WAAYV,EAAeW,EAAaC,EAAaV,GAAmB,IAAD,8BACnE,cAAMF,EAAOF,EAAYY,cAAeR,IAJ5CS,SAGuE,IAFvEC,SAEuE,EAGnE,EAAKZ,MAAQA,EACb,EAAKW,IAAMA,EACX,EAAKC,IAAMA,EALwD,EAL3E,UAAmCb,GAiBtBc,EAAb,kDAGI,WAAYb,EAAoBE,GAAmB,uCACzCF,EAAOF,EAAYe,mBAAoBX,GAJrD,UAAwCH,GAU3Be,EAAb,kDAGI,WAAYd,EAAgBE,GAAmB,uCACrCF,EAAOF,EAAYgB,eAAgBZ,GAJjD,UAAoCH,GClF7B,SAASgB,EAAsBJ,EAAaC,GAC/C,OAAOI,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,GAGjD,SAASQ,EAAgBC,GAAgC,IAAlBC,EAAiB,uDAAJ,GAClDA,IAAKA,EAAM,IAChB,IAAMC,EAAcF,EAAMG,QAAO,SAAAC,GAAC,OAAKH,EAAII,SAASD,MACpD,OAAOF,EAAYN,KAAKC,MAAMD,KAAKE,SAAWI,EAAYI,SAOvD,SAASC,EAAgB3B,GAA2C,IAAxB4B,IAAuB,yDAEhEV,EAASH,EAAsB,EAAE,KAEvC,QAAIf,IAAUJ,EAAYiC,OAASD,KAE1B5B,IAAUJ,EAAYkC,KACpBZ,EAAS,GAEXlB,IAAUJ,EAAYmC,OACpBb,EAAS,GAEXlB,IAAUJ,EAAYoC,SACpBd,EAAS,GAEXlB,IAAUJ,EAAYqC,OACpBf,EAAS,QADf,GAMF,SAASgB,EAAiBC,EAAQC,GACrC,IAAMC,EAAYD,EAAME,QAAQH,GAEhC,MADe,sBAAOC,EAAMG,MAAMF,IAAnB,YAAkCD,EAAMG,MAAM,EAAGF,KAa7D,SAASG,EAAkBC,EAAcC,GAEvCA,IACDA,EAASD,EACTA,EAAQ,GAIZ,IADA,IAAME,EAAM,GACHC,EAAIH,EAAMG,EAAEF,EAAOE,IACxBD,EAAIE,KAAKD,GAGb,OAAOD,EC9DJ,IC+DKG,ED/DCC,EAAb,uHAQI,SAAkDC,EAAmBC,GAEjE,QAAIA,EAAOC,gCACFF,EAAKG,OAAM,SAAAC,GAAG,OAAIA,EAAI,SAK3BJ,EAAKK,MAAK,SAAAD,GAAG,OAAIA,EAAI1B,OAASuB,EAAOK,gBAAgBtD,WAhBjE,6BAuBI,SAA8BuD,EAAoCN,GAE9D,IAFsF,IAAD,OAE5EL,EAAI,EAAGA,EAAI,IAAOA,IAAK,CAI5B,IACMY,EADgBlD,KAAKmD,mBAAmBF,EAAkBN,GAChCS,KAAI,SAAAN,GAAG,OAAI,EAAKO,mBAAmBP,EAAKH,EAAOK,gBAAgBtD,UAK/F,GAF+BM,KAAKsD,mCAAmCJ,EAAWP,GAEtD,CAIxB,IAAMY,EAAUL,EAAUE,KAAI,SAAAF,GAAS,OAAI,IAAIM,EAAIN,EAAWP,MAG9D,OAFA1C,QAAQC,IAAI,4BAA8BoC,EAAI,eAAgBiB,GAEvDA,GAcf,OAFAtD,QAAQwD,MAAM,oDAAqD,CAAER,mBAAkBN,WAEhF,KAxDf,gCA6DI,SAAkCM,EAAoCN,GAKlE,IAHA,IAAIe,EAAeT,EAAiBU,OAAO1B,QACrCS,EAA0B,GAEvBJ,EAAI,EAAGA,EAAIK,EAAOiB,YAAYlE,MAAO4C,IAAK,CAC/C,IAAMuB,EAAgBpD,EAAsBkC,EAAOmB,gBAAgBpE,MAAOiD,EAAOK,gBAAgBtD,OAC3FqE,EAASL,EAAazB,MAAM,EAAG4B,GACrCnB,EAAKH,KAAKwB,GACVL,EAAeA,EAAazB,MAAM4B,EAAeH,EAAatC,QAGlE,OAAOsB,IAzEf,gCA6EI,SAAkCiB,EAAyBK,GAIvD,IAFA,IAAI3B,EAAgCsB,EAAO1B,QAEpCI,EAAIjB,OAAS4C,GAAc,CAC9B,IAAMC,EAAcxD,EAAsB,EAAG4B,EAAIjB,QACjDiB,EAAG,sBACIA,EAAIJ,MAAM,EAAGgC,IADjB,CAEC,MAFD,YAGI5B,EAAIJ,MAAMgC,EAAa5B,EAAIjB,UAItC,OAAOiB,MA1Ff,KAmGamB,EAKT,WAAYG,EAAmBhB,GAAwB,yBAHvDgB,YAGsD,EAIlD3D,KAAK2D,OAASA,G,iBC7CVnB,K,4CAAAA,E,sDAAAA,E,wDAAAA,E,mBAAAA,E,sBAAAA,E,8BAAAA,E,8BAAAA,E,0BAAAA,E,sDAAAA,E,sDAAAA,E,kCAAAA,E,kCAAAA,E,0BAAAA,E,8DAAAA,E,gCAAAA,E,uBAAAA,M,KAwBL,IC3EF0B,ED2EQC,EAAb,iDAKIC,qBAAsB,IAAI7D,EAAoBjB,EAAYiC,KAAMiB,EAAY4B,sBALhF,KAMIC,0BAA2B,IAAIjE,EAAc,EAAG,EAAG,EAAEoC,EAAY6B,2BANrE,KAOIC,2BAA4B,IAAI9D,GAAe,EAAMgC,EAAY4B,sBAPrE,KAUIG,gBAAiB,IAAIhE,EAAmBjB,EAAYqC,OAAQa,EAAY+B,iBAV5E,KAWIC,UAAW,IAAIhE,GAAe,EAAMgC,EAAYgC,WAXpD,KAaIC,YAAa,IAAIjE,GAAe,EAAMgC,EAAYiC,aAbtD,KAcIC,cAAe,IAAIlE,GAAe,EAAMgC,EAAYkC,eAdxD,KAgBIC,0BAA4B,IAAIpE,EAAmBjB,EAAYkC,KAAMgB,EAAYmC,2BAhBrF,KAiBIC,0BAA4B,IAAIrE,EAAmBjB,EAAYkC,KAAMgB,EAAYoC,2BAjBrF,KAuBI5B,gBAAiB,IAAI5C,EAAc,EAAG,EAAG,EAAIoC,EAAYQ,iBAvB7D,KAwBIc,gBAAiB,IAAI1D,EAAc,EAAG,EAAG,EAAGoC,EAAYsB,iBAxB5D,KAyBIF,YAAa,IAAIxD,EAAc,EAAG,EAAG,GAAIoC,EAAYoB,aAzBzD,KA0BIhB,8BAA+B,IAAIpC,GAAe,EAAMgC,EAAYI,+BA1BxE,KA6BIiC,eAAgB,IAAItE,EAAmBjB,EAAYmC,OAAQe,EAAYqC,gBA7B3E,KA8BIC,UAAW,IAAIvE,EAAmBjB,EAAYiC,KAAMiB,EAAYsC,WA9BpE,yCAgCI,WACI,OAAOC,OAAOC,QAAQhF,UAjC9B,KAuCaiF,EAMT,aAAe,IAAD,gCAJdtC,OAAS,IAAIwB,EAIC,KAHde,SAAW,IAAIpF,IAGD,oBAEgBE,KAAK2C,OAAOqC,SAF5B,yBAEIG,EAFJ,0BAINA,EAAQtF,iBAAiBuF,WAAU,WAC/BnF,QAAQC,IAAI,iBAAkBiF,GAC9B,EAAKD,SAAS/E,KAAK,UAJ3B,2BAAgD,IAFtC,gCC3ILkF,EAAb,WAMI,WAAYC,EAAcC,GAAiB,yBAJ3CC,QAI0C,OAH1CF,UAG0C,OAF1CC,WAE0C,EACtCvF,KAAKwF,GAAKF,EACVtF,KAAKsF,KAAOA,EACZtF,KAAKuF,MAAL,OAAaA,QAAb,IAAaA,IAASD,EAT9B,0CAYI,WAA8C,IAAvCG,EAAsC,uDAAjBvB,EAAUwB,MAClC,OAAID,IAAcvB,EAAUwB,MAAc1F,KAAKuF,MACnCvF,KAAKsF,SAdzB,M,SAmBKpB,K,YAAAA,E,eAAAA,M,KAKE,IAAMyB,EAAb,yFAcI,WACI,OAAO7D,EAAMrB,EAAsB,EAAG,OAf9C,uBAkBI,SAAwBmF,GAUpB,MATmB,CACfD,EAAME,EACNF,EAAMG,EACNH,EAAMI,GACNJ,EAAMK,GACNL,EAAMM,GACNN,EAAMO,GACNP,EAAMQ,IAEKhF,SAASyE,GAAc1B,EAAUkC,KACpClC,EAAUwB,UA7B9B,KAAaC,EACFE,EAAI,IAAIR,EAAK,KADXM,EAEFO,GAAK,IAAIb,EAAK,KAAM,MAFlBM,EAGFU,EAAI,IAAIhB,EAAK,KAHXM,EAIFK,GAAK,IAAIX,EAAK,KAAM,MAJlBM,EAKFW,EAAI,IAAIjB,EAAK,KALXM,EAMFG,EAAI,IAAIT,EAAK,KANXM,EAOFQ,GAAK,IAAId,EAAK,KAAM,MAPlBM,EAQFY,EAAI,IAAIlB,EAAK,KARXM,EASFM,GAAK,IAAIZ,EAAK,KAAM,MATlBM,EAUFa,EAAI,IAAInB,EAAK,KAVXM,EAWFI,GAAK,IAAIV,EAAK,KAAM,MAXlBM,EAYFc,EAAI,IAAIpB,EAAK,KAsBjB,IAAMvD,EAAgBiD,OAAO2B,OAAOf,GC3D9BgB,EAMT,WACI/G,EACAgH,EACAC,GACD,yBATHrB,QASE,OARF5F,UAQE,OAPFgH,WAOE,OANFC,oBAME,EACE7G,KAAKJ,KAAOA,EACZI,KAAKwF,GAAK5F,EACVI,KAAK4G,MAAQA,EACb5G,KAAK6G,eAAiBA,GAIjBC,EAAb,kCAAaA,EACFC,cAAgB,IAAIJ,EAAS,SAAU,EAAG,QADxCG,EAEFE,YAAc,IAAIL,EAAS,cAAe,EAAG,MAF3CG,EAGFG,YAAc,IAAIN,EAAS,cAAe,EAAG,KAH3CG,EAIFI,WAAa,IAAIP,EAAS,aAAc,EAAG,MAJzCG,EAKFK,WAAa,IAAIR,EAAS,aAAc,EAAG,KALzCG,EAMFM,aAAe,IAAIT,EAAS,eAAgB,EAAG,MAN7CG,EAOFO,QAAU,IAAIV,EAAS,UAAW,EAAG,MAPnCG,EAQFQ,aAAe,IAAIX,EAAS,eAAgB,EAAG,KAR7CG,EASFS,WAAa,IAAIZ,EAAS,aAAc,EAAG,OATzCG,EAUFU,WAAa,IAAIb,EAAS,aAAc,EAAG,MAVzCG,EAWFW,aAAe,IAAId,EAAS,eAAgB,GAAI,KAX9CG,EAYFY,aAAe,IAAIf,EAAS,eAAgB,GAAI,UAGpD,IC9BKgB,ED8BCC,EAAY7C,OAAO2B,OAAOI,I,SC9B3Ba,K,QAAAA,E,aAAAA,M,KAKL,IAAME,EAAb,WAOI,WAAYC,EAAYC,GAAiD,IAAnCC,EAAkC,uDAAtBL,EAAkBM,GAAI,yBALxEH,UAKwE,OAJxEC,YAIwE,OAHxEG,cAGwE,OAFxEF,eAEwE,EAEpEhI,KAAK8H,KAAOA,EACZ9H,KAAK+H,OAASA,EACd/H,KAAKgI,UAAYA,EACjBhI,KAAKkI,SAAWL,EAAiBM,qBAAqBL,EAAMC,EAAQC,GAZ5E,6DAgBI,SAAmCF,EAAYC,GAAkE,IAApDC,EAAmD,uDAAtBL,EAAkBM,GAClGG,EAAYtG,EAAME,QAAQ8F,GAC1BO,EAAcvG,EAAME,QAAQ+F,GAoBlC,OAjBIK,IAAcC,EACHvB,EAAUC,cAEjBiB,IAAcL,EAAkBM,GAC5BI,EAAcD,EACHR,EAAUS,EAAcD,GAExBR,EAAU,GAAKQ,EAAYC,GAGtCA,EAAcD,EACHR,EAAUQ,GAAa,GAAKC,IAE5BT,EAAUQ,EAAYC,KAlCrD,+BAwCI,SAAgCC,EAAcJ,GAC1C,IAAMnG,EAAYD,EAAME,QAAQsG,GAEhC,MADe,sBAAOxG,EAAMG,MAAMF,IAAnB,YAAkCD,EAAMG,MAAM,EAAGF,KAC/CmG,EAAStB,WA3ClC,KCLa2B,EAAb,WAKI,WACI/C,EACAoC,EACAf,GACD,yBARHrB,QAQE,OAPFoC,eAOE,OANFf,oBAME,EACE7G,KAAKwF,GAAKA,EACVxF,KAAK4H,UAAYA,EACjB5H,KAAK6G,eAAiBA,EAZ9B,oDAeI,SAAwByB,EAAexG,GAAc,oBAG1B9B,KAAK4H,WAHqB,IAGjD,2BAAuC,CAAC,IAA7BM,EAA4B,QACnC,IAAKpG,EAAMX,SAAS0G,EAAiBW,kBAAkBF,EAAUJ,IAC7D,OAAO,GALkC,8BASjD,OAAO,MAxBf,KA6BaO,EAAb,kCAAaA,EAEF1B,cAAgB,IAAIwB,EACvB,SACA,CAACzB,EAAUC,eACX,UALK0B,EAOFC,MAAQ,IAAIH,EAAM,QACrB,CAACzB,EAAUC,cACXD,EAAUI,WACVJ,EAAUQ,cACV,KAXKmB,EAaFE,QAAU,IAAIJ,EAAM,UACvB,CAACzB,EAAUC,cACXD,EAAUI,WACVJ,EAAUO,SACV,OAjBKoB,EAmBFG,MAAQ,IAAIL,EAAM,QAAS,CAC9BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,cACV,IAvBKmB,EAyBFI,OAAS,IAAIN,EAAM,UAAM,CAC5BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,aACVR,EAAUY,cAEV,WA/BKe,EAiCFK,OAAS,IAAIP,EAAM,IAAK,CAC3BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,aACVR,EAAUW,cAEV,KAvCKgB,EAyCFM,OAAS,IAAIR,EAAM,KAAM,CAC5BzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUQ,aACVR,EAAUW,cAEV,MA/CKgB,EAiDFO,SAAW,IAAIT,EAAM,OAAQ,CAChCzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUW,aACVX,EAAUO,SACV,QAtDKoB,EAwDFQ,SAAW,IAAIV,EAAM,MAAO,CAC/BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,aACVR,EAAUW,aACVX,EAAUE,aAEV,OA/DKyB,EAiEFS,aAAe,IAAIX,EAAM,MAAO,CACnCzB,EAAUC,cACVD,EAAUK,WACVL,EAAUS,WACVT,EAAUW,cAEV,OAvEKgB,EAyEFU,cAAgB,IAAIZ,EAAM,OAAQ,CACrCzB,EAAUC,cACVD,EAAUK,WACVL,EAAUO,QACVP,EAAUQ,aACVR,EAAUW,cAEV,QAhFKgB,EAkFFW,WAAa,IAAIb,EAAM,IAAK,CAC/BzB,EAAUC,cACVD,EAAUQ,cACV,KArFKmB,EAuFFY,SAAW,IAAId,EAAM,WAAO,CAC/BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUS,WACVT,EAAUY,cACV,YA5FKe,EA8FFa,KAAO,IAAIf,EAAM,QAAM,CAC1BzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUO,QACVP,EAAUU,YACV,SAnGKiB,EAqGFc,MAAQ,IAAIhB,EAAM,OAAQ,CAC7BzB,EAAUC,cACVD,EAAUE,YACVF,EAAUK,WACVL,EAAUS,YACV,QA1GKkB,EA4GFe,YAAc,IAAIjB,EAAM,UAAM,CACjCzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUQ,aACVR,EAAUY,cACV,WAjHKe,EAmHFgB,OAAS,IAAIlB,EAAM,KAAM,CAC5BzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUQ,aACVR,EAAUU,YACV,MAxHKiB,EA0HFiB,OAAS,IAAInB,EAAM,IAAK,CAC3BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,aACVR,EAAUU,YACV,KA/HKiB,EAiIFkB,QAAU,IAAIpB,EAAM,MAAO,CAC9BzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUQ,aACVR,EAAUS,YACV,OAtIKkB,EAwIFmB,QAAU,IAAIrB,EAAM,KAAM,CAC7BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,aACVR,EAAUS,YACV,MA7IKkB,EA+IFoB,OAAS,IAAItB,EAAM,KAAM,CAC5BzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUQ,aACVR,EAAUG,aACV,MApJKwB,EAsJFqB,OAAS,IAAIvB,EAAM,IAAK,CAC3BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,aACVR,EAAUG,aACV,KA3JKwB,EA6JFsB,QAAU,IAAIxB,EAAM,MAAO,CAC9BzB,EAAUC,cACVD,EAAUI,WACVJ,EAAUQ,aACVR,EAAUE,aACV,OAlKKyB,EAoKFuB,QAAU,IAAIzB,EAAM,KAAM,CAC7BzB,EAAUC,cACVD,EAAUK,WACVL,EAAUQ,aACVR,EAAUE,aACV,MAzKKyB,EA2KFwB,KAAO,IAAI1B,EAAM,QAAS,CAC7BzB,EAAUC,cACVD,EAAUM,aACVN,EAAUQ,aACVR,EAAUW,cACV,QAhLKgB,EAkLFyB,SAAW,IAAI3B,EAAM,SAAU,CAClCzB,EAAUC,cACVD,EAAUM,aACVN,EAAUQ,aACVR,EAAUW,aACVX,EAAUG,aACV,UAxLKwB,EA0LF0B,SAAW,IAAI5B,EAAM,OAAQ,CAChCzB,EAAUC,cACVD,EAAUM,aACVN,EAAUQ,aACVR,EAAUW,aACVX,EAAUS,YACV,QAKD,IAAM5D,EAAmBoB,OAAO2B,OAAO+B,GCjOjC2B,EAST,WAAY5E,EAAYoB,EAAiByD,GAAmB,yBAP5D7E,QAO2D,OAN3D5F,UAM2D,OAL3DgH,WAK2D,OAJ3DyD,WAI2D,OAF3DzC,eAE2D,EAEvD5H,KAAKwF,GAAKA,EACVxF,KAAKJ,KAAO4F,EACZxF,KAAK4G,MAAQA,EAEb5G,KAAKqK,MAAL,OAAaA,QAAb,IAAaA,IAAS,KAEtB,IARuD,EAQjDC,EAAc,GAEhBC,EAAM,EAV6C,cAWpC3D,GAXoC,IAWvD,2BAA0B,CAAC,IAAhB4D,EAAe,QAElB5C,EADJ2C,EAAMC,EAAKD,IAEPD,EAAY/H,KAAKqF,EAAU2C,KAdoB,8BAkBvDvK,KAAK4H,UAAL,CACId,EAAUC,eADd,OAEOuD,IAQFG,EAAb,yFAuEI,WACI,OAAO5J,EAAgB6J,OAxE/B,KAAaD,EAEF7B,MAAQ,IAAIwB,EAAM,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CACrD,gBACA,UACA,YACA,UACA,cACA,kBACA,aATKK,EAYFE,cAAgB,IAAIP,EAAM,iBAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CACtE,sBACA,4CACA,wBACA,oCACA,+BACA,oBACA,mCAnBKK,EAsBFG,aAAe,IAAIR,EACtB,gBACA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB,CACI,qBACA,aACA,oBACA,8BACA,kBACA,4BACA,sCA6CL,IClHHS,EDkHSH,EAAmB3F,OAAO2B,OAAO+D,GErGjCK,EAAb,WAsBI,aAGe,IAFXxC,EAEU,uDAFO3C,EAAMoF,OACvBC,EACU,uDADKP,EAAO7B,MACtBqC,EAAU,uDAAH,EAAG,yBAvBd3C,cAuBc,OAtBd0C,WAsBc,OArBdC,UAqBc,OAnBdnJ,WAmBc,OAhBdlC,UAgBc,OAfd4F,QAec,OAddC,eAcc,OAZdyF,YAYc,OAXdC,aAWc,OAVdC,eAUc,EAEVpL,KAAKgL,MAAQA,EACbhL,KAAKsI,SAAWA,EAChBtI,KAAKiL,KAAOA,EACZjL,KAAKwF,GAAK8C,EAAS9C,GAAK,IAAMwF,EAAMxF,GAAK,UAAYyF,EACrDjL,KAAKJ,KAAO0I,EAAS9C,GAAK,KAAQwF,EAAMX,MAAmBW,EAAMX,MAAMY,GAAvBD,EAAMxF,IAEtDxF,KAAKyF,UAAYE,EAAMF,UAAU6C,GAGjCtI,KAAK8B,MAAQ9B,KAAKqL,oBAAoB/C,EAAU0C,EAAOC,GAEvDjL,KAAKmL,QAAUnL,KAAKsL,WAAWtL,KAAK8B,OACpC9B,KAAKkL,OAASlL,KAAKuL,UAAUvL,KAAK8B,OAE9B9B,KAAKoL,UAAYpL,KAAKwL,eAAexL,KAAK8B,OAE1CmJ,GAAwB,OAAhBD,EAAMX,OACdpK,QAAQwD,MAAM,4BAA6B,CAAE6E,WAAU0C,QAAOC,SA5C1E,8CAkBI,WACI,OAAOjL,KAAKsI,SAASmD,OAAOzL,KAAKyF,aAnBzC,iCAkDI,SAA4B6C,EAAgB0C,EAAcC,GAGtD,IAAMS,EAAY9J,EAAiB0G,EAAUxG,GAE7C,OAAOkJ,EAAMpD,UAAUxE,KAAI,SAAA8E,GAKvB,OAAOwD,EAAUxD,EAAStB,YA5DtC,wBAiEI,SAAmB+E,GAAqB,IAAD,SAE7BtJ,EAAM,GAFuB,cAGhBsJ,GAHgB,2BAGxB/F,EAHwB,QAYzBgG,EAAiBhK,EAAiBgE,EAAM+F,GAAY1K,QAAO,SAAC2E,EAAMtD,GAAP,OAAmB,IAANA,GAAiB,IAANA,GAAiB,IAANA,GAAiB,IAANA,KAE9Gc,KAAI,SAAAyI,GAAS,OAAIhE,EAAiBM,qBAAqBvC,EAAMiG,MAE1DC,OAAU,EAhBiB,cAiBXnI,GAjBW,yBAiBpBoI,EAjBoB,QAkB3B,GAAIH,EAAe/I,OAAM,SAAAqF,GAAQ,OAAI6D,EAAMnE,UAAUzG,SAAS+G,MAE1D,OADA4D,EAAaC,EACb,SAHR,2BAA4B,kBAGpB,OApBuB,8BAwB/B,GAAID,EAAY,CACZ,IAAME,EAAgB,IAAIC,EAAcrG,EAAMkG,EAAY,GAC1DzJ,EAAIE,KAAKyJ,QAGT/L,QAAQwD,MAAM,mBAAoB,CAACzD,KAAK,EAAM4F,OAAM+F,aAAYC,oBA1BxE,2BAAgC,IAHG,8BAkCnC,OAAOvJ,IAnGf,uBAsGI,SAAkBsJ,GAAqB,IAAD,SAE5BtJ,EAAM,GAFsB,cAGfsJ,GAHe,2BAGvB/F,EAHuB,QAYxBgG,EAAiBhK,EAAiBgE,EAAM+F,GAAY1K,QAAO,SAAC2E,EAAMtD,GAAP,OAAmB,IAANA,GAAiB,IAANA,GAAiB,IAANA,KAEnGc,KAAI,SAAAyI,GAAS,OAAIhE,EAAiBM,qBAAqBvC,EAAMiG,MAE1DC,OAAU,EAhBgB,cAiBVnI,GAjBU,yBAiBnBoI,EAjBmB,QAkB1B,GAAIH,EAAe/I,OAAM,SAAAqF,GAAQ,OAAI6D,EAAMnE,UAAUzG,SAAS+G,MAE1D,OADA4D,EAAaC,EACb,SAHR,2BAA4B,kBAGpB,OApBsB,8BAwB9B,GAAID,EAAY,CACZ,IAAME,EAAgB,IAAIC,EAAcrG,EAAMkG,EAAY,GAC1DzJ,EAAIE,KAAKyJ,QAGT/L,QAAQwD,MAAM,mBAAoB,CAACzD,KAAK,EAAM4F,OAAM+F,aAAYC,oBA1BxE,2BAAgC,IAHE,8BAkClC,OAAOvJ,IAxIf,4BA4II,SAAuBsJ,GAEnB,IAFsC,EAEhCtJ,EAAM,GAF0B,cAGnBsJ,GAHmB,IAGtC,2BAA+B,CAAC,IAAD,EAApB/F,EAAoB,QAErBsG,EAAe,GAFM,cAIPvI,GAJO,IAI3B,2BAA4B,CAAC,IAAlBoI,EAAiB,QACxB,GAAIA,IAAUtD,EAAO1B,cACJgF,EAAMI,iBAAiBvG,EAAM+F,IAG1CO,EAAa3J,KAAK,IAAI0J,EAAcrG,EAAMmG,KATvB,8BAY3B1J,EAAIE,KAAK2J,IAfyB,8BAkBtC,OAAO7J,IA9Jf,sBAkKI,WACI,OAAOxB,EAAgBb,KAAK8B,SAnKpC,wBAqKI,WACI,OAAOjB,EAAgBb,KAAKmL,WAtKpC,6BAyKI,SAAgBpK,GACZ,OAAOF,EAAgBb,KAAKmL,QAAS,CAACpK,MA1K9C,4BA6KI,SAAeA,GACX,OAAOF,EAAgBb,KAAKkL,OAAQ,CAACnK,MA9K7C,gCAiLI,SAAmBA,GACf,IAAMyJ,EAAO3J,EAAgBb,KAAKoL,UAAW,CAACrK,IAC9C,OAAOF,EAAgB2J,EAAM,CAACzJ,MAnLtC,qBAuLI,WAEI,OAAO,IAAI+J,EADKjD,EAAiBW,kBAAkBxI,KAAKsI,SAAUxB,EAAUQ,cAC1CtH,KAAKgL,SAzL/C,sBA2LI,WAEI,OAAO,IAAIF,EADKjD,EAAiBW,kBAAkBxI,KAAKsI,SAAUxB,EAAUM,cAC1CpH,KAAKgL,SA7L/C,2BAgMI,SAAcR,GACV,OAAIA,EAAO,GAAKA,EAAO,GACnBvK,QAAQwD,MAAM,sCAAuC,CAAE+G,OAAMQ,MAAOhL,OAC7DA,KAAKmL,QAAQ,IAEjBnL,KAAKmL,QAAQX,EAAO,KArMnC,yCAwMI,SAA4B4B,GASxB,IAPA,IAAMvK,EAAIpB,EAAsB,EAAG2L,GAG7BC,EAAa5L,EAAsB,EAAG,KAAO,GAE/C8C,EAASvD,KAEJsC,EAAI,EAAGA,EAAIT,EAAGS,IACnBiB,EAAS8I,EAAa9I,EAAO+I,UAAY/I,EAAOgJ,WAGpD,OAAOhJ,IArNf,6BAwNI,WAOI,IANA,IAKIiJ,EAFEC,EAAc,GAGXnK,EAAI,EAAGA,EANH,EAMaA,IAAK,CAE3B,IAAMQ,EAA8B,GACpC2J,EAAYlK,KAAKO,GAEjB,IAAK,IAAI4J,EAAI,EAAGA,EAVF,EAUiBA,IAAK,CAGhC,GADmBjM,EAAsB,EAAG,KAC3B,IAAY,IAANiM,EACnB5J,EAAIP,KAAK,UACN,CACH,IAAMpC,EAAOU,EAAgBb,KAAKmL,QAAS,CAACqB,IAC5C1J,EAAIP,KAAKpC,GACTqM,EAAOrM,IAMnB,OAAOsM,MAlPf,KDXO,IEUKE,EFVCV,EAAb,WAWI,WAAY3D,EAAgByD,EAAca,EAAyBC,GAA0B,yBAT7FrH,QAS4F,OAR5F5F,UAQ4F,OAP5FmM,WAO4F,OAN5FzD,cAM4F,OAL5FxG,WAK4F,OAJ5F8K,aAI4F,OAF5FC,oBAE4F,EACxF7M,KAAKsI,SAAWA,EAChBtI,KAAK+L,MAAQA,EACb/L,KAAKJ,KAAO0I,EAAShD,KAAOyG,EAAMvG,GAClCxF,KAAKwF,GAAK8C,EAAS9C,GAAKuG,EAAMvG,GAC1BoH,IAAS5M,KAAKwF,GAAKxF,KAAKwF,GAAK,aAAV,OAAwBoH,QAAxB,IAAwBA,OAAxB,EAAwBA,EAASpH,KAExDxF,KAAK8B,MAAQmK,EAAca,uBAAuBxE,EAAUyD,GAE5D/L,KAAK4M,QAAUA,EACf5M,KAAK6M,eAAiBA,EArB9B,sCAwBI,WACI,OAAK7M,KAAK4M,QACH5M,KAAK4M,QAAQ9K,MAAME,QAAQhC,KAAKsI,UAAY,EADzB,KAzBlC,kBA6BI,WAAc,IAAD,EACT,OAAKtI,KAAK4M,QACH5M,KAAKsI,SAASmD,OAAd,UAAqBzL,KAAK4M,eAA1B,aAAqB,EAAcnH,WAAazF,KAAK+L,MAAMlF,eADxC7G,KAAKsI,SAAShD,KAAOtF,KAAK+L,MAAMlF,iBA9BlE,2BAkCI,WAAuB,IAAD,OACdkG,EAAY,GACXlC,IAAgBA,ECgOtB,WACH,IADqC,EAC/BtH,EAAS,GADsB,cAIlBzB,GAJkB,IAIrC,2BAA0B,CAAC,IAAD,EAAf8D,EAAe,sBACF8E,GADE,IACtB,2BAA4B,CAAC,IAAlBM,EAAiB,QACxBzH,EAAOhB,KAAK,IAAIuI,EAAclF,EAAMoF,KAFlB,gCAJW,8BAUrC,OAAOzH,ED1OmCyJ,IAFpB,oBAGEnC,GAHF,yBAGPG,EAHO,QAIV,EAAKlJ,MAAMe,OAAM,SAAA+C,GAAI,OAAIoF,EAAMlJ,MAAMX,SAASyE,OAC9CmH,EAAUxK,KAAKyI,IAFvB,2BAAqC,IAHnB,8BAQlB,OAAO+B,IA1Cf,mCA6CI,WAA+B,IAAD,OAC1B,OAAO/M,KAAKiN,gBAAgB7J,KAAI,SAAA4H,GAE5B,IAAMC,EAAO,EAAKiC,YAAYlC,GAAOR,KAC/B2C,EAAsB,KAATlC,EAAc,GAAKD,EAAMA,MAAMX,MAASW,EAAMA,MAAMX,MAAMY,GAAQ,GAE/EmC,EAAqB,EAAKF,YAAYlC,GAAOS,OAAS,IAAM0B,EAQlE,OANUnC,EAAMpL,KACZ,YACA,EAAKsN,YAAYlC,GAAOR,KACxB,YACA4C,KAILC,KAAK,QA7DhB,yBAwEI,SAAmBT,GACf,OAAO,IAAIX,EAAcjM,KAAKsI,SAAUtI,KAAK+L,MAAOa,MAzE5D,qCAkEI,SAAsCtE,EAAgByD,GAClD,IAAMhK,EAAYD,EAAME,QAAQsG,GAC1BoD,EAAS,sBAAO5J,EAAMG,MAAMF,IAAnB,YAAkCD,EAAMG,MAAM,EAAGF,KAChE,OAAOgK,EAAMnE,UAAUxE,KAAI,SAAA8E,GAAQ,OAAIwD,EAAUxD,EAAStB,cArElE,KGMa0G,EAMT,WAAY3J,EAAyB4J,EAAqBC,GAAiC,yBAJ3F7J,YAI0F,OAH1F8J,iBAG0F,OAF1FF,iBAE0F,OAD1FC,iBAC0F,EACtFxN,KAAK2D,OAASA,EACd3D,KAAKyN,YAAc9J,EAAOvC,OAC1BpB,KAAKuN,YAAcA,EACnBvN,KAAKwN,YAAcA,GAKdE,EAAb,2GAOI,SAAqCC,EAAYhL,GAgB7C,IAdA,IAaI6J,EAbExB,EAAQ2C,EAAK3C,MAEfrH,EAAS,GACP6J,EAAc,GAGdI,EAAYjL,EAAOiB,YAAYlE,MAEjC6N,EAAc,EAGZE,EAAchN,EAAsBmN,EAJlBjL,EAAOK,gBAAgBtD,MAImCkO,GAG3EjK,EAAOvC,OAASqM,GAAa,CAGhC,GAAIpM,EAAgBsB,EAAOyB,qBAAqB1E,MAAO+N,GAAe,GAAI,CAEtE,IACII,EAAa,GADHpN,EAAsB,EAAG,IAGnCoN,EAAa,CACT7C,EAAM8C,cAAc,GACpB9C,EAAM8C,cAAc,GACpB9C,EAAM8C,cAAc,IAExBtB,EAAOxB,EAAM8C,cAAc,KAE3BD,EAAa,CACT7C,EAAM8C,cAAc,GACpB,IAAI7B,EAAcjB,EAAM8C,cAAc,GAAGxF,SAAUG,EAAOK,QAC1DkC,EAAM8C,cAAc,IAExBtB,EAAOxB,EAAM8C,cAAc,IAE/BnK,EAAOpB,KAAKsL,EAAW,IACvBlK,EAAOpB,KAAKsL,EAAW,IACvBlK,EAAOpB,KAAKsL,EAAW,IAEvB5N,QAAQC,IAAI,iBACZqN,GAA4B,EAC5BC,EAAYjL,KAAKsL,GAKrB,IAAIE,EAAW/C,EAAMgD,gBAAgBxB,GASf,IAAlBuB,EAASvD,MAAc7H,EAAO2B,2BAA2B5E,QACzDqO,EAAW,IAAI9B,EAAc8B,EAASzF,SAAUG,EAAOK,SAwB3D0D,EAAOuB,EAEPpK,EAAOpB,KAAKwL,GAwBhB,OAnBIpL,EAAO+B,cAAchF,QAUrBiE,GADAA,GADAA,GADAA,GANAA,EAASA,EAAOP,KAAI,SAAA2I,GAChB,OAAmB,IAAfA,EAAMvB,KACCQ,EAAMiD,iBAEVlC,MAEK3I,KAAI,SAAA2I,GAAK,OAAIA,EAAMA,QAAUtD,EAAOE,QAAUqC,EAAMgD,kBAAoBjC,MACxE3I,KAAI,SAAA2I,GAAK,OAAIA,EAAMA,QAAUtD,EAAOO,SAAWgC,EAAMgD,kBAAoBjC,MACzE3I,KAAI,SAAA2I,GAAK,OAAIA,EAAMA,QAAUtD,EAAOO,SAAWgC,EAAMgD,kBAAoBjC,MACzE3I,KAAI,SAAA2I,GAAK,OAAIA,EAAMA,QAAUtD,EAAOO,SAAWgC,EAAMgD,kBAAoBjC,MAO7F9L,QAAQC,IAAI,mCAAoCyD,GAEzC,IAAI2J,EAAiB3J,EAAQ4J,EAAaC,OApHzD,KCVaU,EAAb,WAYI,WAAYC,EAAuBC,GAAgB,IAAD,gCAVlDpD,WAUkD,OATlDtI,UASkD,OARlDO,sBAQkD,OAPlDiC,SAAW,IAAIpF,IAOmC,KANlDsO,WAMkD,OALlDD,cAKkD,OAHlDE,mBAAqB,IAAIpJ,EAKrBjF,KAAKoO,MAAQA,EACbpO,KAAKmO,SAAWA,EAGhBnO,KAAKqO,mBAAmBnJ,SAASE,WAAU,WACvC,EAAKkJ,OAGL,EAAKpJ,SAAS/E,KAAK,MAInBgO,GACAA,EAASjJ,SAASE,WAAU,WACxB,EAAKkJ,OAEL,EAAKpJ,SAAS/E,KAAK,SAK3B,IAAMwC,EAAS3C,KAAKqO,mBAAmB1L,OACvC3C,KAAKgL,MAAQ,IAAIF,EAAcnF,EAAMoF,OAAQN,EAAO7B,OACpD5I,KAAKiD,iBAAmByK,EAAwBa,uBAAuBvO,KAAM2C,GAC7E3C,KAAK0C,KAAOD,EAAY+L,gBAAgBxO,KAAKiD,iBAAkBN,GAE/D3C,KAAKsO,OAxCb,wCAkDI,WACI,IAAM3L,EAAS3C,KAAKqO,mBAAmB1L,OAEjCwL,EAAWnO,KAAKmO,SAGlBA,IAAuC,IAA3BxL,EAAO6B,UAAU9E,MAC7BM,KAAKgL,MAAQmD,EAASnD,MAItBhL,KAAKgL,MAHGmD,EAGKA,EAASnD,MAAMyD,4BAA4B9L,EAAO0B,0BAA0B3E,OAF5E,IAAIoL,EAAcnF,EAAMoF,OAAQN,EAAO7B,OAKxD5I,KAAKiD,iBAAmByK,EAAwBa,uBAAuBvO,KAAM2C,GAC7E3C,KAAK0C,KAAOD,EAAY+L,gBAAgBxO,KAAKiD,iBAAkBN,GAC/D3C,KAAKkF,SAAS/E,KAAK,OAlE3B,M,SFDYwM,O,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,UAAAA,M,KAUL,IAAM+B,EAAb,WA8BI,aAAe,yBA5BfxJ,SAAW,IAAIpF,IA4BD,KA1Bd6O,MAAgB,GA0BF,KAzBdC,eAyBc,EACV5O,KAAK6O,UACL7O,KAAK6O,UACL7O,KAAK6O,UACL7O,KAAK4O,UAAY,CACbjC,EAAUnG,EACVmG,EAAUnG,EACVmG,EAAUlG,EACVkG,EAAU9G,GAtCtB,8CAQI,WAA6B,IAAD,OACxB,OAAO7F,KAAK4O,UAAUxL,KAAI,SAAAd,GACtB,OAAO,EAAKqM,MAAMrM,QAV9B,0BAcI,WACItC,KAAK2O,MAAMG,SAAQ,SAAAnB,GAAI,OAAIA,EAAKW,UAChCtO,KAAKkF,SAAS/E,KAAK,KAhB3B,8BAmBI,WAGI,IAHuC,IAAnB4O,EAAkB,uDAAH,EAE7BC,EAAgB,GACb1M,EAAI,EAAEA,EAAEyM,EAAQzM,IACrB0M,EAAczM,KAAK9B,EAAsB,EAAE,IAE/CT,KAAK4O,UAAYI,EACjBhP,KAAKiP,iBA1Bb,0BA0CI,SAAoBnO,GAChBd,KAAK4O,UAAY9N,EACjBd,KAAKkF,SAAS/E,KAAK,KA5C3B,qBA+CI,WACI,IAAM+O,EAAW,IAAIhB,EAAKlO,KAAK2O,MAAM3O,KAAK2O,MAAMvN,OAAO,GAAIpB,KAAK2O,MAAMvN,QACtEpB,KAAK2O,MAAL,sBAAiB3O,KAAK2O,OAAtB,CAA6BO,IAG7BA,EAAQhK,SAASE,UAAUpF,KAAKkF,YApDxC,wBAuDI,SAAWyI,GACP3N,KAAK2O,MAAQ3O,KAAK2O,MAAM1N,QAAO,SAAAkO,GAAC,OAAIxB,IAASwB,SAxDrD,KGNeC,GAFS,IAVpB,aAAe,yBAFfC,KAAO,IAAIX,EAIPzO,QAAQC,IAAIF,KAAKqP,OCFlB,SAASC,GAAgCC,GAE5C,MAA8BC,mBAAiB,GAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,qBAAU,WAEN,GAAIJ,EAAc,CACd,IAAMK,EAAML,EAAarK,SAASE,WAAU,WAExCsK,EAAYD,EAAU,MAE1B,OAAO,kBAAMG,EAAIC,kBAGtB,CAACN,EAAcE,EAASC,IAIpBD,E,+BCdI,SAASK,GAAWC,GAE/B,IAAMpC,EAAOoC,EAAMpC,KACbhL,EAASgL,EAAKU,mBAAmB1L,OAQvC,OANA2M,GAAgC3B,GAGhC2B,GAAgC3B,EAAKU,oBAG9B,uBAAK2B,UAAWC,KAAQC,UAAxB,UAEH,yBAAQC,QAAS,SAAAjP,GAAC,OAAIyM,EAAKW,QAA3B,qBAEC3L,EAAOqC,QAAQ5B,KAAI,SAAAgN,GAEhB,IfqBaC,EerBb,cAAwBD,EAAxB,GAAOxQ,EAAP,KAAauF,EAAb,KAEA,OAAmB,IAAfwI,EAAKS,OAAejJ,EAAQvF,OAAS4C,EAAY6B,2BAClC,IAAfsJ,EAAKS,OAAejJ,EAAQvF,OAAS4C,EAAYgC,UADkC,KAGhF,uBAAKwL,UAAWC,KAAQ9K,QAAxB,UAEH,sBAAK6K,UAAWC,KAAQrQ,KAAxB,UfcSyQ,EeZKzQ,EfanByQ,EAAIC,MAAM,IAAIlN,KAAI,SAACmN,EAAQC,GAChC,OAAOD,EAAOE,gBAAkBF,EAAzB,UACO,IAARC,EAAY,IAAM,IADjB,OACsBD,EAAOG,eACjCH,KACFlD,KAAK,KejBwBsD,WAAW,IAAK,OAIpC,uBAAKX,UAAWC,KAAQW,MAAxB,UAEKzL,EAAQxF,OAASH,EAAYgB,gBAG1B,wBACIb,KAAK,WACLkR,QAAS1L,EAAQzF,MACjBwF,SAAU,SAAAhE,GACNiE,EAAQzF,MAAQwB,EAAE6G,OAAO8I,WAOpC1L,EAAQxF,OAASH,EAAYe,oBAG1B,yBAAQ2E,SAAU,SAAAhE,GAAC,OAAIiE,EAAQzF,MAAQwB,EAAE6G,OAAOrI,OAAsBA,MAAOyF,EAAQzF,MAArF,SACKqF,OAAO2B,OAAOpH,GAAa8D,KAAI,SAAA1D,GAC5B,OAAO,kCAAqBA,GAARA,QAM/ByF,EAAQxF,OAASH,EAAYY,eAG1B,yBAAQ8E,SAAU,SAAAhE,GAAC,OAAIiE,EAAQzF,MAAQoR,WAAW5P,EAAE6G,OAAOrI,QAAQA,MAAOyF,EAAQzF,MAAMqR,WAAxF,SACK7O,EAAmBiD,EAAqC9E,IAAM8E,EAAqC7E,KAAK8C,KAAI,SAAA1D,GACzG,OAAO,kCAAgCA,GAAnBA,EAAMqR,oBAQ1C,sBAAKf,UAAWC,KAAQe,KAAxB,SAEK7L,EAAQvF,OAAS4C,EAAY4B,sBAAwBuJ,EAAK1K,iBAAiBsK,oBAQxF,sBAAKyC,UAAWC,KAAQgB,WAAxB,SAGE,WAAWtD,EAAK3C,MAAMpL,OAIxB,sBAAKoQ,UAAWC,KAAQ1M,OAAxB,SAEKoK,EAAKjL,KAAKU,KAAI,SAAAN,GACX,OAAO,sBAAKkN,UAAWC,KAAQnN,IAAxB,SAEFA,EAAIa,OAAOP,KAAI,SAAA2I,GACZ,OAAO,uBAAKiE,UAAWC,KAAQlE,MAAxB,UAEFA,GAASA,EAAMvB,KAAO,MACtBuB,GAASA,EAAMN,uBC1G5C,SAASyF,GAAgBC,GACrB,OAAQ,GAAKA,EAAO,IAIjB,IAAMC,GAAb,WASI,aAAuD,IAA3CD,EAA0C,uDAA5B,GAAIE,EAAwB,gEAR9CC,aAAe,EAQ+B,KAP9CC,KAAe,GAO+B,KAN9CC,cAAwBN,GAAgBlR,KAAKuR,MAMC,KAL9CE,sBAK8C,OAJtDvM,SAAW,IAAIpF,IAIuC,KAF9C4R,iBAE8C,EAElD1R,KAAK0R,YAAcL,EACnBrR,KAAKmR,IAAMA,EACXnR,KAAK2R,iBAbb,oDAgBI,WACI3R,KAAKsR,aAAe,IAjB5B,kBAoBI,WACQtR,KAAKyR,kBACLG,cAAc5R,KAAKyR,oBAtB/B,uBA0BI,WACIzR,KAAKsR,aAAetR,KAAKsR,aAAe,EACxCtR,KAAKkF,SAAS/E,KAAKH,KAAKsR,gBA5BhC,eAgCI,WACI,OAAOtR,KAAKuR,MAjCpB,IA8DI,SAAeJ,GACXnR,KAAKuR,KAAOJ,EACZnR,KAAKwR,cAAgBN,GAAgBC,GACrCnR,KAAK2R,iBACL3R,KAAK6R,cAlEb,yBAoCI,SAAmBjE,EAAmB5J,GAMlC,IALA,IAAM8N,EAAelE,EAAY5J,EAC3B+N,EAAW/R,KAAKsR,aAAeQ,EAGjCrC,EAAU,EACPA,EAAUqC,GAAc,CAE3B,GAAIrC,IAAYsC,GAAatC,EAAUsC,GAAatC,EAAQzL,EAAc+N,EAUtE,MALe,CACXjP,IAAI2M,EAAQzL,EACZgO,WAHeD,EAAWtC,EAI1BwC,UANcF,IAAaD,EAAa,GAWhDrC,GAAoBzL,KAzDhC,4BAsEI,WAA0B,IAAD,OACjBhE,KAAKyR,kBACLG,cAAc5R,KAAKyR,kBAGvBzR,KAAKyR,iBAAmBS,aAAY,WAChC,EAAKR,cACL,EAAKG,cAEN7R,KAAKwR,mBA/EhB,K,oBCFIW,GAAS,IAAIf,GAAU,IAAI,eAIhB,SAASgB,KAEpB9C,GAAgCF,GAAeC,MAE/C,IAAMA,EAAOD,GAAeC,KAE5BC,GAAgC6C,IAGhC,IAAMzP,EAAc2M,EAAKgD,aAAajP,KAAI,SAAAuK,GACtC,OAAOA,EAAKjL,QACb4P,QAAO,SAACC,EAAMpS,GAAP,OAAgBoS,EAAKC,OAAOrS,MAEhC4R,EAAYI,GAAOM,YAAY/P,EAAKtB,OAAQiO,EAAKV,MAAM,GAAGN,mBAAmB1L,OAAOK,gBAAgBtD,OAQ1G,OANAO,QAAQC,IAAI6R,GAML,sBAAK/B,UAAWC,KAAQC,UAAxB,SAIFxN,EAAKU,KAAI,SAACN,EAAKR,GAIZ,OAAO,sBAAK0N,UAAWC,KAAQnN,IAAxB,SAEFA,EAAIa,OAAOP,KAAI,SAAC2I,EAAOW,GAEpB,IAAMK,EAAS,OAAGhB,QAAH,IAAGA,OAAH,EAAGA,EAAO2G,wBACnBC,EAAoBZ,GAAYA,EAASjP,MAAQR,GAAKyP,EAASC,aAAetF,EAEpF,OAAO,uBAAKsD,UAAWC,KAAQlE,MAAO6G,MAAO7F,EAAtC,iBAGFhB,QAHE,IAGFA,OAHE,EAGFA,EAAON,OAER,sBAAKuE,UAAWC,KAAQ4C,gBACpBC,MAAO,CACHC,QAAQJ,EAAoB,GAAK,uBA5CjER,GAAOa,O,uBCDQ,SAASC,KAEpB,MAAsCzD,mBAASJ,GAAeC,KAAKT,UAAUmC,WAAWJ,WAAW,IAAK,KAAxG,mBAAOuC,EAAP,KAAoBC,EAApB,KAQA,OANA7D,GAAgCF,GAAeC,MAMxC,uBAAKW,UAAWC,KAAQC,UAAxB,UAIH,uBAAKF,UAAWC,KAAQmD,QAAxB,UAGI,sBAAKpD,UAAWC,KAAQoD,MAAxB,0BAMA,wBAAO1T,KAAK,SACRD,MAAOwT,EACPhO,SAAU,SAAAhE,GAAC,OAAIiS,EAAejS,EAAE6G,OAAOrI,QACvC4T,OAAQ,SAAApS,GACJ,IAAMqS,EAAeL,EAAY5C,MAAM,IAAIlN,KAAI,SAAAoQ,GAAC,OAAI1C,WAAW0C,MAC/DpE,GAAeC,KAAKoE,aAAaF,MAIzC,yBAAQpD,QAAS,SAAAjP,GAAC,OAAIkO,GAAeC,KAAKqE,oBAA1C,oBAECtE,GAAeC,KAAKT,UAAUmC,WAAWJ,WAAW,IAAK,OAI9D,uBAAKX,UAAWC,KAAQ0D,IAAxB,UAKI,sBAAK3D,UAAWC,KAAQtB,MAAxB,SAEKS,GAAeC,KAAKV,MAAMvL,KAAI,SAAAuK,GAE3B,OAAO,eAACmC,GAAD,CAAYnC,KAAMA,SAMjC,sBAAKqC,UAAWC,KAAQZ,KAAxB,SAGI,eAAC+C,GAAD,YClDDwB,OAVf,WAGE,OACE,sBAAK5D,UAAU,MAAf,SACI,eAACiD,GAAD,OCKOY,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS7I,OAEP,eAAC,GAAD,IAEA8I,SAASC,eAAe,SAM1BX,M,kBCfAzU,EAAOC,QAAU,CAAC,UAAY,8BAA8B,QAAU,4BAA4B,KAAO,yBAAyB,OAAS,2BAA2B,IAAM,wBAAwB,MAAQ,4B,kBCA5MD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,QAAU,sBAAsB,MAAQ,oBAAoB,IAAM,kBAAkB,MAAQ,oBAAoB,KAAO,sB","file":"static/js/main.28af13a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Sheet_container__1lR6k\",\"bar\":\"Sheet_bar__zUD0a\",\"chord\":\"Sheet_chord__F1BfF\",\"currentPosition\":\"Sheet_currentPosition__3Qx7A\"};","import { Subject } from \"rxjs\";\r\nimport { SettingName } from \"./configs\";\r\n\r\n\r\nexport enum ConfigValue {\r\n    None = \"none\",\r\n    Rare = \"rare\",\r\n    Medium = \"medium\",\r\n    WellDone = \"well done\",\r\n    Insane = \"insane\"\r\n}\r\n\r\n\r\nexport enum UserInput {\r\n    CheckBox = \"checkbox\",\r\n    Select = \"select\",\r\n    NumberDropdown = \"numberDropdown\"\r\n}\r\n\r\nexport type ISettingValue = number | boolean | ConfigValue | number[]\r\n\r\nexport interface ISetting {\r\n    value: ISettingValue\r\n    userInput: UserInput\r\n    onSettingChanged: Subject<any>\r\n    type: SettingType\r\n    name:SettingName\r\n}\r\n\r\nexport enum SettingType {\r\n    ConfigValueSetting = \"ConfigValueSetting\",\r\n    // NumberArraySetting = \"NumberArraySetting\",\r\n    NumberSetting = \"NumberSetting\",\r\n    BooleanSetting = \"BooleanSetting\",\r\n}\r\n\r\nexport abstract class Setting<T> {\r\n\r\n    type:SettingType\r\n    onSettingChanged: Subject<T> = new Subject<T>()\r\n    _value: T;\r\n    name:SettingName\r\n\r\n    constructor(value: T, type:SettingType, name:SettingName) {\r\n        this._value = value\r\n        this.type = type\r\n        this.name = name\r\n    }\r\n\r\n    set value(value: T) {\r\n        this._value = value\r\n        console.log(\"value set\", value)\r\n        this.onSettingChanged.next(value)\r\n    }\r\n\r\n    get value() {\r\n        return this._value\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class NumberSetting extends Setting<number> {\r\n\r\n    min\r\n    max\r\n\r\n    constructor(value: number, min: number, max: number, name:SettingName) {\r\n        super(value, SettingType.NumberSetting, name)\r\n\r\n        this.value = value\r\n        this.min = min\r\n        this.max = max\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class ConfigValueSetting extends Setting<ConfigValue> {\r\n\r\n\r\n    constructor(value: ConfigValue, name:SettingName) {\r\n        super(value, SettingType.ConfigValueSetting, name)\r\n\r\n    }\r\n\r\n\r\n}\r\nexport class BooleanSetting extends Setting<boolean> {\r\n\r\n\r\n    constructor(value: boolean, name:SettingName) {\r\n        super(value, SettingType.BooleanSetting, name)\r\n\r\n    }\r\n\r\n\r\n}\r\n// export class NumberArraySetting extends Setting<number[]> {\r\n\r\n\r\n//     constructor(value: number[], name:SettingName) {\r\n//         super(value, SettingType.NumberArraySetting, name)\r\n\r\n//     }\r\n\r\n\r\n// }\r\n","import { ConfigValue } from \"./configs/settings\";\r\nimport { Note } from \"./notes\";\r\n\r\n/**\r\n * random int -> min and max included \r\n * @param min \r\n * @param max \r\n * @returns \r\n */\r\nexport function randomIntFromInterval(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function randomFromArray(array: any[], not: any[] = []) {\r\n    if (!not) not = []\r\n    const filterArray = array.filter(e => !not.includes(e))\r\n    return filterArray[Math.floor(Math.random() * filterArray.length)];\r\n}\r\n\r\nexport function getArrayOfSize(n : number) {\r\n   return Array.apply(null, Array(n)).map(function (x, i) { return i; })\r\n}\r\n\r\nexport function withProbability(value:ConfigValue, equation:boolean=true) {\r\n\r\n    const random = randomIntFromInterval(0,100)\r\n\r\n    if (value === ConfigValue.None || !equation) return false\r\n\r\n    else if (value === ConfigValue.Rare) {\r\n        return random > 80\r\n    }\r\n    else if (value === ConfigValue.Medium) {\r\n        return random > 60\r\n    }\r\n    else if (value === ConfigValue.WellDone) {\r\n        return random > 40\r\n    }\r\n    else if (value === ConfigValue.Insane) {\r\n        return random > 20\r\n    }\r\n\r\n}\r\n\r\nexport function getScaleFromNote(n:Note, notes:Note[]) {\r\n    const noteIndex = notes.indexOf(n)\r\n    const calcNotes = [...notes.slice(noteIndex), ...notes.slice(0, noteIndex)]\r\n    return calcNotes\r\n}\r\n\r\n\r\nexport function kebabize(str:string) {\r\n    return str.split('').map((letter, idx) => {\r\n      return letter.toUpperCase() === letter\r\n       ? `${idx !== 0 ? '-' : ''}${letter.toLowerCase()}`\r\n       : letter;\r\n    }).join('');\r\n }\r\n\r\nexport function createNumberArray(start:number, finish?:number) {\r\n\r\n    if (!finish) {\r\n        finish = start\r\n        start = 0\r\n    }\r\n\r\n    const res = []\r\n    for (let i = start;i<finish;i++) {\r\n        res.push(i)\r\n    }   \r\n\r\n    return res\r\n\r\n}","\r\nimport { config } from \"rxjs\";\r\nimport { randomIntFromInterval } from \"./helper\";\r\nimport { IRandomConfig } from \"./configs/configs\"\r\n\r\nimport { ChordProgression } from \"./progressions\";\r\nimport { SpecificChord } from \"./specificChords\";\r\n\r\n\r\nexport class BarsCreator {\r\n\r\n    // Config is evaluated here.\r\n    // These conditions need to get met to accept\r\n    // how the program divided the chords into bars. \r\n\r\n    \r\n    // IMPLEMENT CONFIG CONSEQUENCES HERE\r\n    private static doesBarChordsFullfillAllConditions(bars: BarChords[], config:IRandomConfig) {\r\n\r\n        if (config.AlwaysHaveChordOnFirstQuarter) {\r\n            if (!bars.every(bar => bar[0])) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        if (bars.some(bar => bar.length > config.MaxChordsPerBar.value)) {\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    public static mapChordsToBars(chordProgression: ChordProgression, config: IRandomConfig) {\r\n\r\n        for (let i = 0; i < 10000; i++) {\r\n\r\n            // Here we add the conditions that the tune should fulfill\r\n\r\n            const dividedChords = this.divideChordsToBars(chordProgression, config)\r\n            const barChords = dividedChords.map(bar => this.fillChordsWithNull(bar, config.MaxChordsPerBar.value))\r\n\r\n\r\n            const fulfilledAllConditions = this.doesBarChordsFullfillAllConditions(barChords, config)\r\n\r\n            if (fulfilledAllConditions) {\r\n\r\n                // Take this random run\r\n                \r\n                const result =  barChords.map(barChords => new Bar(barChords, config))\r\n                console.log(\"Found bar division after \" + i + \" iterations.\", result)\r\n\r\n                return result\r\n\r\n            } else {\r\n\r\n                // Generate new and \r\n                continue;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        console.error(\"Could not find chords! 10000 iterations too less?\", { chordProgression, config })\r\n\r\n        return []\r\n\r\n    }\r\n\r\n\r\n    private static divideChordsToBars(chordProgression: ChordProgression, config: IRandomConfig) {\r\n\r\n        let copiedChords = chordProgression.chords.slice()\r\n        const bars: SpecificChord[][] = []\r\n\r\n        for (let i = 0; i < config.HowManyBars.value; i++) {\r\n            const randomHowMany = randomIntFromInterval(config.MinChordsPerBar.value, config.MaxChordsPerBar.value)\r\n            const newBar = copiedChords.slice(0, randomHowMany)\r\n            bars.push(newBar)\r\n            copiedChords = copiedChords.slice(randomHowMany, copiedChords.length)\r\n        }\r\n\r\n        return bars\r\n\r\n    }\r\n\r\n    private static fillChordsWithNull(chords: SpecificChord[], chordsPerBar: number) : BarChords {\r\n\r\n        let res: (SpecificChord | null)[] = chords.slice()\r\n\r\n        while (res.length < chordsPerBar) {\r\n            const randomIndex = randomIntFromInterval(0, res.length)\r\n            res = [\r\n                ...res.slice(0, randomIndex),\r\n                null,\r\n                ...res.slice(randomIndex, res.length),\r\n            ]\r\n        }\r\n\r\n        return res\r\n\r\n    }\r\n\r\n}\r\n\r\nexport type BarChord = SpecificChord | null\r\nexport type BarChords = BarChord[]\r\n\r\nexport class Bar {\r\n\r\n    chords: BarChords\r\n\r\n\r\n    constructor(chords: BarChords, config: IRandomConfig) {\r\n\r\n\r\n\r\n        this.chords = chords\r\n\r\n    }\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n\r\n// INFOO\r\n\r\nimport { Subject } from \"rxjs\";\r\nimport { ISubscribable } from \"../../components/useRerenderOnSubscribableChange\";\r\nimport { BooleanSetting, ConfigValue, ConfigValueSetting, ISetting, /* NumberArraySetting */ NumberSetting } from \"./settings\";\r\n\r\n// SEE BARSCREATOR AND CHORDPROGRESSIONCREATOR\r\n\r\n// The configs that refer to the chord progression itself\r\n// are considered in the ChordProgressionCreator in the progressions.ts\r\n\r\n// The configs that refer to the division into bars are considered in the\r\n// BarsCreator in the bars.ts\r\n// end with 6 or 1\r\n\r\n// einige settings auf tune ebene heben?\r\n// Was ist wenn eine zwei fünf eins über drei bars geht? oder sogar mehr?\r\n\r\n\r\n// Keine doppelten keys!\r\n\r\n// Gb oder F# auf 50/50 chance stellen\r\n\r\n// jazinezz\r\n// rhythm crazinezz\r\n// tetrads/triads/crazy chords\r\n// bars\r\n// max chords per bar\r\n// circle of fifth closeness\r\n\r\n\r\nexport interface IRandomConfig {\r\n\r\n    // configs that refer to the chordProgression\r\n\r\n    // implemented\r\n    JazzyProgressionness: ConfigValueSetting\r\n    CircleOfFifthMaxCloseness: NumberSetting\r\n    UseAlwaysMajorThirdOnStep3: BooleanSetting\r\n\r\n    // not implemented\r\n    ChordComplexity: ConfigValueSetting\r\n    KeyChange: BooleanSetting\r\n    // DoNotUseSteps: NumberArraySetting\r\n    DoNotUseStep7:BooleanSetting\r\n    EndWith6Or1: BooleanSetting\r\n\r\n    UserMelodicMinorFromStep3:ConfigValueSetting\r\n    UseHarmonicMinorFromStep6:ConfigValueSetting\r\n\r\n    // configs that refer to the distribution into bars\r\n\r\n    // implemented\r\n    MaxChordsPerBar: NumberSetting\r\n    MinChordsPerBar: NumberSetting\r\n    HowManyBars: NumberSetting\r\n    AlwaysHaveChordOnFirstQuarter: BooleanSetting\r\n\r\n    //not implemented\r\n    RhythmCrzyness: ConfigValueSetting\r\n    EmptyBars: ConfigValueSetting\r\n\r\n\r\n}\r\n\r\n\r\ntype SettingEntry = [string, ISetting]\r\n\r\nexport enum SettingName {\r\n    JazzyProgressionness = \"JazzyProgressionness\",\r\n    CircleOfFifthMaxCloseness =\"CircleOfFifthMaxCloseness\",\r\n    UseAlwaysMajorThirdOnStep3=\"UseAlwaysMajorThirdOnStep3\",\r\n\r\n    ChordComplexity=\"\",\r\n    KeyChange=\"KeyChange\",\r\n    DoNotUseSteps=\"DoNotUseSteps\",\r\n    DoNotUseStep7=\"DoNotUseStep7\",\r\n    EndWith6Or1=\"EndWith6Or1\",\r\n\r\n    UserMelodicMinorFromStep3=\"UserMelodicMinorFromStep3\",\r\n    UseHarmonicMinorFromStep6=\"UseHarmonicMinorFromStep6\",\r\n\r\n    MaxChordsPerBar=\"MaxChordsPerBar\",\r\n    MinChordsPerBar=\"MinChordsPerBar\",\r\n    HowManyBars=\"HowManyBars\",\r\n    AlwaysHaveChordOnFirstQuarter=\"AlwaysHaveChordOnFirstQuarter\",\r\n\r\n    RhythmCrzyness=\"RhythmCrzyness\",\r\n    EmptyBars=\"EmptyBars\",\r\n    \r\n}\r\n\r\nexport class RandomConfig implements IRandomConfig {\r\n\r\n        // configs that refer to the chordProgression\r\n\r\n    // implemented\r\n    JazzyProgressionness= new ConfigValueSetting( ConfigValue.None, SettingName.JazzyProgressionness)\r\n    CircleOfFifthMaxCloseness= new NumberSetting(3, 1, 6,SettingName.CircleOfFifthMaxCloseness)\r\n    UseAlwaysMajorThirdOnStep3= new BooleanSetting(true, SettingName.JazzyProgressionness)\r\n\r\n    // not implemented\r\n    ChordComplexity= new ConfigValueSetting(ConfigValue.Insane, SettingName.ChordComplexity)\r\n    KeyChange= new BooleanSetting(true, SettingName.KeyChange)\r\n    // DoNotUseSteps= new NumberArraySetting([], SettingName.DoNotUseSteps)\r\n    EndWith6Or1= new BooleanSetting(true, SettingName.EndWith6Or1)\r\n    DoNotUseStep7= new BooleanSetting(true, SettingName.DoNotUseStep7)\r\n\r\n    UseHarmonicMinorFromStep6 = new ConfigValueSetting(ConfigValue.Rare, SettingName.UseHarmonicMinorFromStep6)\r\n    UserMelodicMinorFromStep3 = new ConfigValueSetting(ConfigValue.Rare, SettingName.UserMelodicMinorFromStep3)\r\n\r\n\r\n    // configs that refer to the distribution into bars\r\n\r\n    // implemented\r\n    MaxChordsPerBar= new NumberSetting(2, 1, 8,  SettingName.MaxChordsPerBar)\r\n    MinChordsPerBar= new NumberSetting(1, 0, 4, SettingName.MinChordsPerBar)\r\n    HowManyBars= new NumberSetting(4, 1, 20, SettingName.HowManyBars)\r\n    AlwaysHaveChordOnFirstQuarter= new BooleanSetting(true, SettingName.AlwaysHaveChordOnFirstQuarter)\r\n\r\n    //not implemented\r\n    RhythmCrzyness= new ConfigValueSetting(ConfigValue.Medium, SettingName.RhythmCrzyness)\r\n    EmptyBars= new ConfigValueSetting(ConfigValue.None, SettingName.EmptyBars)\r\n\r\n    get entries() : SettingEntry[] {\r\n        return Object.entries(this)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class SubscribableRandomConfig implements ISubscribable {\r\n\r\n    config = new RandomConfig()\r\n    onChange = new Subject()\r\n\r\n\r\n    constructor() {\r\n\r\n        for (const [, setting] of this.config.entries) {\r\n            \r\n            setting.onSettingChanged.subscribe(()=> {\r\n                console.log(\"config changed\", setting)\r\n                this.onChange.next(null)\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}","import { randomIntFromInterval } from \"./helper\"\r\n\r\nexport class Note {\r\n\r\n    id\r\n    flat\r\n    sharp\r\n\r\n    constructor(flat: string, sharp?: string) {\r\n        this.id = flat\r\n        this.flat = flat\r\n        this.sharp = sharp ?? flat\r\n    }\r\n\r\n    render(scaleType: ScaleType=ScaleType.Sharp) {\r\n        if (scaleType === ScaleType.Sharp) return this.sharp\r\n        else return this.flat\r\n    }\r\n\r\n}\r\n\r\nenum ScaleType {\r\n    Flat = \"flat\",\r\n    Sharp = \"sharp\"\r\n}\r\n\r\nexport class Notes {\r\n    static C = new Note(\"C\")\r\n    static Db = new Note(\"Db\", \"C#\")\r\n    static D = new Note(\"D\")\r\n    static Eb = new Note(\"Eb\", \"D#\")\r\n    static E = new Note(\"E\")\r\n    static F = new Note(\"F\")\r\n    static Gb = new Note(\"Gb\", \"F#\")\r\n    static G = new Note(\"G\")\r\n    static Ab = new Note(\"Ab\", \"G#\")\r\n    static A = new Note(\"A\")\r\n    static Bb = new Note(\"Bb\", \"A#\")\r\n    static B = new Note(\"B\",)\r\n\r\n    public static get Random() {\r\n        return notes[randomIntFromInterval(0, 11)]\r\n    }\r\n\r\n    public static scaleType(note: Note) {\r\n        const flatScales = [\r\n            Notes.C,\r\n            Notes.F,\r\n            Notes.Bb,\r\n            Notes.Eb,\r\n            Notes.Ab,\r\n            Notes.Db,\r\n            Notes.Gb,\r\n        ]\r\n        if (flatScales.includes(note)) return ScaleType.Flat\r\n        else return ScaleType.Sharp\r\n    }\r\n\r\n}\r\n\r\nexport const notes: Note[] = Object.values(Notes)\r\n","\r\nexport class Interval {\r\n    id\r\n    name\r\n    steps\r\n    standardSymbol\r\n\r\n    constructor(\r\n        name:string,\r\n        steps:number,\r\n        standardSymbol:string\r\n    ) {\r\n        this.name = name\r\n        this.id = name\r\n        this.steps = steps\r\n        this.standardSymbol = standardSymbol\r\n    }\r\n}\r\n\r\nexport class Intervals {\r\n    static PerfectUnison = new Interval(\"unison\", 0, \"root\")\r\n    static MinorSecond = new Interval(\"minorSecond\", 1, \"b9\")\r\n    static MajorSecond = new Interval(\"majorSecond\", 2, \"9\")\r\n    static MinorThird = new Interval(\"minorThird\", 3, \"b3\")\r\n    static MajorThird = new Interval(\"majorThird\", 4, \"3\")\r\n    static PerfectForth = new Interval(\"perfectForth\", 5, \"11\")\r\n    static Tritone = new Interval(\"tritone\", 6, \"b5\")\r\n    static PerfectFifth = new Interval(\"perfectFifth\", 7, \"5\")\r\n    static MinorSixth = new Interval(\"minorSixth\", 8, \"b13\")\r\n    static MajorSixth = new Interval(\"majorSixth\", 9, \"13\")\r\n    static MinorSeventh = new Interval(\"minorSeventh\", 10, \"7\")\r\n    static MajorSeventh = new Interval(\"majorSeventh\", 11, \"Δ\")\r\n}\r\n\r\nexport const intervals = Object.values(Intervals)\r\n\r\n","\r\nimport { Interval, intervals, Intervals } from \"./intervals\";\r\nimport { Note, notes } from \"./notes\";\r\n\r\nexport enum IntervalDirection {\r\n    Up = \"up\",\r\n    Down = \"down\"\r\n}\r\n\r\nexport class SpecificInterval {\r\n\r\n    root\r\n    target\r\n    interval\r\n    direction\r\n\r\n    constructor(root: Note, target: Note, direction = IntervalDirection.Up) {\r\n\r\n        this.root = root\r\n        this.target = target\r\n        this.direction = direction\r\n        this.interval = SpecificInterval.intervalBetweenNotes(root, target, direction)\r\n\r\n    }\r\n\r\n    public static intervalBetweenNotes(root: Note, target: Note, direction: IntervalDirection=IntervalDirection.Up) {\r\n        const rootIndex = notes.indexOf(root)\r\n        const targetIndex = notes.indexOf(target)\r\n\r\n        let interval;\r\n        if (rootIndex === targetIndex) {\r\n            interval = Intervals.PerfectUnison\r\n        } else {\r\n            if (direction === IntervalDirection.Up) {\r\n                if (targetIndex > rootIndex) {\r\n                    interval = intervals[targetIndex - rootIndex]\r\n                } else {\r\n                    interval = intervals[12 - rootIndex + targetIndex]\r\n                }\r\n            } else {\r\n                if (targetIndex > rootIndex) {\r\n                    interval = intervals[rootIndex + (12 - targetIndex)]\r\n                } else {\r\n                    interval = intervals[rootIndex - targetIndex]\r\n                }\r\n            }\r\n        }\r\n        return interval\r\n    }\r\n    public static calculateInterval(rootNote:Note,interval:Interval) {\r\n        const noteIndex = notes.indexOf(rootNote)\r\n        const calcNotes = [...notes.slice(noteIndex), ...notes.slice(0, noteIndex)]\r\n        return calcNotes[interval.steps]\r\n\r\n\r\n    }\r\n\r\n\r\n} ","import { Interval, Intervals } from \"./intervals\"\r\nimport { Note } from \"./notes\"\r\nimport { SpecificInterval } from \"./specificIntervals\"\r\n\r\nexport class Chord {\r\n    id\r\n    intervals\r\n    standardSymbol\r\n\r\n    constructor(\r\n        id: string,\r\n        intervals: Interval[],\r\n        standardSymbol: string,\r\n    ) {\r\n        this.id = id\r\n        this.intervals = intervals\r\n        this.standardSymbol = standardSymbol\r\n    }\r\n\r\n    public isPresentInNotes(rootNote:Note, notes:Note[]) {\r\n        // if (notes.length !== this.intervals.length) return\r\n\r\n        for (const interval of this.intervals) {\r\n            if (!notes.includes(SpecificInterval.calculateInterval(rootNote, interval))) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n}\r\n\r\nexport class Chords {\r\n\r\n    static PerfectUnison = new Chord(\r\n        \"unison\",\r\n        [Intervals.PerfectUnison],\r\n        \"unison\"\r\n    )\r\n    static Minor = new Chord(\"minor\",\r\n        [Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth],\r\n        \"_\"\r\n    )\r\n    static MinorB5 = new Chord(\"minorb5\",\r\n        [Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.Tritone],\r\n        \"_b5\"\r\n    )\r\n    static Major = new Chord(\"major\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth],\r\n        \"\"\r\n    )\r\n    static Major7 = new Chord(\"Δ7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSeventh,\r\n    ],\r\n        \"Δ7\"\r\n    )\r\n    static Chord7 = new Chord(\"7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"7\"\r\n    )\r\n    static Minor7 = new Chord(\"_7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"_7\"\r\n    )\r\n    static Minor7b5 = new Chord(\"_7b5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.MinorSeventh,\r\n        Intervals.Tritone],\r\n        \"_7b5\"\r\n    )\r\n    static Chord7b9 = new Chord(\"7b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n        Intervals.MinorSecond\r\n    ],\r\n        \"7b9\"\r\n    )\r\n    static Chord7Sharp5 = new Chord(\"7#5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.MinorSixth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"7#5\"\r\n    )\r\n    static Chord7Sharp11 = new Chord(\"7#11\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.Tritone,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"7#11\"\r\n    )\r\n    static PowerChord = new Chord(\"5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectFifth],\r\n        \"5\"\r\n    )\r\n    static MajorB13 = new Chord(\"Δ#5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.MinorSixth,\r\n        Intervals.MajorSeventh],\r\n        \"Δ#5\"\r\n    )\r\n    static Dim7 = new Chord(\"°7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.Tritone,\r\n        Intervals.MajorSixth],\r\n        \"°7\"\r\n    )\r\n    static b9b13 = new Chord(\"#5b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorSecond,\r\n        Intervals.MajorThird,\r\n        Intervals.MinorSixth],\r\n        \"#5b9\"\r\n    )\r\n    static MinorMajor7 = new Chord(\"_Δ\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSeventh],\r\n        \"_Δ\"\r\n    )\r\n    static Minor6 = new Chord(\"_6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSixth],\r\n        \"_6\"\r\n    )\r\n    static Major6 = new Chord(\"6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSixth],\r\n        \"6\"\r\n    )\r\n    static Minorb6 = new Chord(\"_b6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSixth],\r\n        \"_b6\"\r\n    )\r\n    static Majorb6 = new Chord(\"b6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSixth],\r\n        \"b6\"\r\n    )\r\n    static Minor9 = new Chord(\"_9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSecond],\r\n        \"_9\"\r\n    )\r\n    static Major9 = new Chord(\"9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSecond],\r\n        \"9\"\r\n    )\r\n    static Minorb9 = new Chord(\"_b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSecond],\r\n        \"_b9\"\r\n    )\r\n    static Majorb9 = new Chord(\"b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSecond],\r\n        \"b9\"\r\n    )\r\n    static Sus4 = new Chord(\"7sus4\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectForth,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh],\r\n        \"sus4\"\r\n    )\r\n    static NineSus4 = new Chord(\"79sus4\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectForth,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n        Intervals.MajorSecond],\r\n        \"79sus4\"\r\n    )\r\n    static Major7b6 = new Chord(\"7b13\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectForth,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n        Intervals.MinorSixth],\r\n        \"7b13\"\r\n    )\r\n\r\n}\r\n\r\nexport const chords : Chord[] = Object.values(Chords)","import { randomFromArray } from \"./helper\"\r\nimport { Interval, intervals, Intervals } from \"./intervals\"\r\n\r\n\r\n\r\nexport class Scale {\r\n\r\n    id\r\n    name\r\n    steps\r\n    modes\r\n\r\n    intervals: Interval[]\r\n\r\n    constructor(id: string, steps: number[], modes?: string[]) {\r\n\r\n        this.id = id\r\n        this.name = id\r\n        this.steps = steps\r\n\r\n        this.modes = modes ?? null\r\n\r\n        const stepsMapped  =[]\r\n        \r\n        let tmp = 0\r\n        for (const step of steps) {\r\n            tmp = step+tmp\r\n            if (intervals[tmp]) {\r\n                stepsMapped.push(intervals[tmp])\r\n            }\r\n        }\r\n\r\n        this.intervals = [\r\n            Intervals.PerfectUnison,\r\n            ...stepsMapped\r\n        ]\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nexport class Scales {\r\n\r\n    static Major = new Scale(\"major\", [2, 2, 1, 2, 2, 2, 1], [\r\n        \"ionisch (dur)\",\r\n        \"dorisch\",\r\n        \"phrygisch\",\r\n        \"lydisch\",\r\n        \"mixolydisch\",\r\n        \"aeolisch (moll)\",\r\n        \"lokrisch\",\r\n    ])\r\n\r\n    static HarmonicMinor = new Scale(\"harmonic minor\", [2, 1, 2, 2, 1, 3, 1], [\r\n        \"harmonic minor mode\",\r\n        \"Locrian 13 or Locrian 6 (half-diminished)\",\r\n        \"Ionian #5 (augmented)\",\r\n        \"Dorian #11 (or dorian #4) (minor)\",\r\n        \"Phrygian dominant (dominant)\",\r\n        \"Lydian #2 (major)\",\r\n        \"Super locrian bb7 (diminished)\",\r\n    ])\r\n\r\n    static MelodicMinor = new Scale(\r\n        \"melodic minor\",\r\n        [2, 1, 2, 2, 2, 2, 1],\r\n        [\r\n            \"melodic minor mode\",\r\n            \"dorisch b9\",\r\n            \"lydisch augmented\",\r\n            \"lydisch dominant / mixo #11\",\r\n            \"mixolydisch b13\",\r\n            \"aeolisch b5 (lokrisch #2)\",\r\n            \"alterierte skala (super lokrisch)\",\r\n        ]\r\n    )\r\n\r\n    // static Chromatic = new Scale(\r\n    //     \"chromatic\",\r\n    //     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],\r\n    // )\r\n\r\n    // static MinorPentatonic = new Scale(\r\n    //     \"minor pentatonic\",\r\n    //     [3, 2, 2, 3, 2],\r\n    // )\r\n\r\n    // static MajorPentatonic = new Scale(\r\n    //     \"major pentatonic\",\r\n    //     [2, 2, 3, 2, 3],\r\n    // )\r\n\r\n    // static MinorPentatonicBlues = new Scale(\r\n    //     \"minor blues pentatonic\",\r\n    //     [3, 2, 1, 1, 3, 2],\r\n    // )\r\n\r\n    // static MajorPentatonicBlues = new Scale(\r\n    //     \"major blues pentatonic\",\r\n    //     [2, 1, 1, 3, 2, 3],\r\n    // )\r\n\r\n    // static BluesRocknRoll = new Scale(\r\n    //     \"blues rock n roll\",\r\n    //     [2, 1, 1, 1, 1, 1, 2, 1, 2],\r\n    // )\r\n    \r\n    // static BBKingBlues = new Scale(\r\n    //     \"B.B. King blues\",\r\n    //     [3, 3, 1, 1, 2],\r\n    // )\r\n\r\n    static get Random() {\r\n        return randomFromArray(scales)\r\n    }\r\n\r\n}\r\n\r\nexport const scales : Scale[] = Object.values(Scales)","import { Chord } from \"./chords\";\r\nimport { Note, notes } from \"./notes\";\r\nimport { Scales } from \"./scales\";\r\nimport { generateSpecificScales, SpecificScale, SpecificScales } from \"./specificScales\";\r\n\r\nlet specificScales: SpecificScale[] | undefined\r\n\r\nexport class SpecificChord {\r\n\r\n    id: string\r\n    name\r\n    chord\r\n    rootNote\r\n    notes\r\n    context?: SpecificScale\r\n\r\n    specialContext?\r\n\r\n    constructor(rootNote: Note, chord: Chord, context?: SpecificScale, specialContext?: string) {\r\n        this.rootNote = rootNote\r\n        this.chord = chord\r\n        this.name = rootNote.flat + chord.id\r\n        this.id = rootNote.id + chord.id\r\n        if (context) this.id = this.id + \" context:\" + context?.id\r\n\r\n        this.notes = SpecificChord.calculateNotesForChord(rootNote, chord)\r\n\r\n        this.context = context\r\n        this.specialContext = specialContext\r\n    }\r\n\r\n    get step() {\r\n        if (!this.context) return \"\"\r\n        return this.context.notes.indexOf(this.rootNote) + 1\r\n    }\r\n\r\n    get render() {\r\n        if (!this.context) return this.rootNote.flat + this.chord.standardSymbol\r\n        return this.rootNote.render(this.context?.scaleType) + this.chord.standardSymbol\r\n    }\r\n\r\n    get presentInScales() {\r\n        let presentIn = []\r\n        if (!specificScales) specificScales = generateSpecificScales()/* .filter(scale => scale.scale !== Scales.Chromatic) */\r\n        for (const scale of specificScales) {\r\n            if (this.notes.every(note => scale.notes.includes(note))) {\r\n                presentIn.push(scale)\r\n            }\r\n        }\r\n        return presentIn\r\n    }\r\n\r\n    get presentInScalesAsString() {\r\n        return this.presentInScales.map(scale => {\r\n\r\n            const mode = this.withContext(scale).step\r\n            const modeString = mode === \"\" ? \"\" : scale.scale.modes ?  scale.scale.modes[mode] : \"\"\r\n\r\n            const modeStringWithRoot = this.withContext(scale).render + \" \" + modeString\r\n\r\n            const s = scale.name +\r\n                \" - step: \" +\r\n                this.withContext(scale).step +\r\n                \"  mode:  \"+\r\n                modeStringWithRoot\r\n\r\n            return s\r\n\r\n        }).join(\"\\n\")\r\n    }\r\n\r\n\r\n\r\n    private static calculateNotesForChord(rootNote: Note, chord: Chord) {\r\n        const noteIndex = notes.indexOf(rootNote)\r\n        const calcNotes = [...notes.slice(noteIndex), ...notes.slice(0, noteIndex)]\r\n        return chord.intervals.map(interval => calcNotes[interval.steps])\r\n    }\r\n\r\n    public withContext(context: SpecificScale) {\r\n        return new SpecificChord(this.rootNote, this.chord, context)\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n// export const specificChords: SpecificChord[] = generateSpecificChords()\r\n\r\n// function generateSpecificChords() {\r\n//     const result = []\r\n\r\n\r\n//     for (const note of notes) {\r\n//         for (const chord of chords) {\r\n//             result.push(new SpecificChord(note, chord))\r\n//         }\r\n//     }\r\n\r\n//     return result\r\n\r\n// }","\r\nimport { chords, Chords } from \"./chords\"\r\nimport { getScaleFromNote, randomFromArray, randomIntFromInterval } from \"./helper\"\r\nimport {  Intervals } from \"./intervals\"\r\nimport { Note, notes, Notes } from \"./notes\"\r\nimport { Scale,  scales,  Scales } from \"./scales\"\r\nimport { SpecificChord } from \"./specificChords\"\r\nimport { SpecificInterval } from \"./specificIntervals\"\r\n\r\n\r\nexport class SpecificScales {\r\n\r\n    get Random() {\r\n        return new SpecificScale(Notes.Random, Scales.Major)\r\n    }\r\n\r\n}\r\n\r\nexport class SpecificScale {\r\n\r\n    rootNote\r\n    scale\r\n    mode\r\n\r\n    notes\r\n    // chords?\r\n\r\n    name\r\n    id\r\n    scaleType\r\n\r\n    triads\r\n    tetrads\r\n    allChords\r\n    // basicScale\r\n\r\n    get rootNoteName() {\r\n        return this.rootNote.render(this.scaleType)\r\n    }\r\n\r\n    constructor(\r\n        rootNote: Note = Notes.Random,\r\n        scale: Scale = Scales.Major,\r\n        mode = 0) {\r\n\r\n        this.scale = scale\r\n        this.rootNote = rootNote\r\n        this.mode = mode\r\n        this.id = rootNote.id + \" \" + scale.id + \" mode: \" + mode\r\n        this.name = rootNote.id + \" \" + (!scale.modes ? scale.id : scale.modes[mode])\r\n\r\n        this.scaleType = Notes.scaleType(rootNote)\r\n\r\n        // this.notes = calculateScaleNotes(rootNote, scale, mode)\r\n        this.notes = this.calculateScaleNotes(rootNote, scale, mode)\r\n\r\n        this.tetrads = this.addTetrads(this.notes)\r\n        this.triads = this.addTriads(this.notes)\r\n\r\n            this.allChords = this.addCrazyChords(this.notes)\r\n\r\n        if (mode && scale.modes === null) {\r\n            console.error(\"Mode not present in scale\", { rootNote, scale, mode })\r\n            return\r\n        }\r\n\r\n    }\r\n\r\n    private calculateScaleNotes(rootNote: Note, scale: Scale, mode: number) {\r\n\r\n\r\n        const calcNotes = getScaleFromNote(rootNote, notes)\r\n\r\n        return scale.intervals.map(interval => {\r\n            // if (interval === undefined) {\r\n            //     console.log(scale, interval)\r\n            //     debugger\r\n            // }\r\n            return calcNotes[interval.steps]\r\n        })\r\n\r\n    }\r\n\r\n    private addTetrads(scaleNotes: Note[]) {\r\n\r\n        const res = []\r\n        for (const note of scaleNotes) {\r\n            // const chords = specificChords\r\n\r\n            //     // Alle Vierklänge herausfinden\r\n            //     .filter(chord => chord.rootNote === note)\r\n            //     .filter(chord => tetrads.includes(chord.chord))\r\n            //     .filter(chord => chord.notes.every(note => scaleNotes.includes(note)))\r\n\r\n            // Get tetrad notes\r\n            const chordIntervals = getScaleFromNote(note, scaleNotes).filter((note, i) => i === 0 || i === 2 || i === 4 || i === 6)\r\n            // filter to intervals\r\n            .map(chordNote => SpecificInterval.intervalBetweenNotes(note, chordNote))\r\n\r\n            let foundChord;\r\n            for (const chord of chords) {\r\n                if (chordIntervals.every(interval => chord.intervals.includes(interval))) {\r\n                    foundChord = chord\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundChord) {\r\n                const specificChord = new SpecificChord(note, foundChord, this)\r\n                res.push(specificChord)\r\n                \r\n            } else {\r\n                console.error(\"Tetrad not found\", {this:this, note, scaleNotes, chordIntervals})\r\n                \r\n            }\r\n\r\n        }\r\n        return res\r\n\r\n    }\r\n    private addTriads(scaleNotes: Note[]) {\r\n\r\n        const res = []\r\n        for (const note of scaleNotes) {\r\n            // const chords = specificChords\r\n\r\n            //     // Alle Vierklänge herausfinden\r\n            //     .filter(chord => chord.rootNote === note)\r\n            //     .filter(chord => tetrads.includes(chord.chord))\r\n            //     .filter(chord => chord.notes.every(note => scaleNotes.includes(note)))\r\n\r\n            // Get tetrad notes\r\n            const chordIntervals = getScaleFromNote(note, scaleNotes).filter((note, i) => i === 0 || i === 2 || i === 4)\r\n            // filter to intervals\r\n            .map(chordNote => SpecificInterval.intervalBetweenNotes(note, chordNote))\r\n\r\n            let foundChord;\r\n            for (const chord of chords) {\r\n                if (chordIntervals.every(interval => chord.intervals.includes(interval))) {\r\n                    foundChord = chord\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundChord) {\r\n                const specificChord = new SpecificChord(note, foundChord, this)\r\n                res.push(specificChord)\r\n                \r\n            } else {\r\n                console.error(\"Tetrad not found\", {this:this, note, scaleNotes, chordIntervals})\r\n                \r\n            }\r\n\r\n        }\r\n        return res\r\n\r\n    }\r\n\r\n    private addCrazyChords(scaleNotes:Note[]) {\r\n\r\n        const res = []\r\n        for (const note of scaleNotes) {\r\n\r\n            const resultChords = []\r\n\r\n            for (const chord of chords) {\r\n                if (chord === Chords.PerfectUnison) continue;\r\n                const hasChord = chord.isPresentInNotes(note, scaleNotes)\r\n\r\n                if (hasChord) {\r\n                    resultChords.push(new SpecificChord(note, chord))\r\n                }\r\n            }\r\n            res.push(resultChords)\r\n\r\n        }\r\n        return res\r\n\r\n    }\r\n\r\n    get RandomNote() {\r\n        return randomFromArray(this.notes)\r\n    }\r\n    get RandomTetrad() {\r\n        return randomFromArray(this.tetrads)\r\n    }\r\n\r\n    getRandomTetrad(not?:SpecificChord) : SpecificChord {\r\n        return randomFromArray(this.tetrads, [not])\r\n\r\n    }\r\n    getRandomTriad(not?:SpecificChord) : SpecificChord {\r\n        return randomFromArray(this.triads, [not])\r\n\r\n    }\r\n    getRandomCrzyChord(not?:SpecificChord) : SpecificChord {\r\n        const step = randomFromArray(this.allChords, [not])\r\n        return randomFromArray(step, [not])\r\n\r\n    }\r\n\r\n    get FifthJump() {\r\n        const newRoot = SpecificInterval.calculateInterval(this.rootNote, Intervals.PerfectFifth)\r\n        return new SpecificScale(newRoot, this.scale)\r\n    }\r\n    get FourthJump() {\r\n        const newRoot = SpecificInterval.calculateInterval(this.rootNote, Intervals.PerfectForth)\r\n        return new SpecificScale(newRoot, this.scale)\r\n    }\r\n\r\n    getStepTetrad(step: number) {\r\n        if (step > 7 || step < 0) {\r\n            console.error(\"Warning, cant geht this step tetrad\", { step, scale: this })\r\n            return this.tetrads[0]\r\n        }\r\n        return this.tetrads[step - 1]\r\n    }\r\n\r\n    getCloseCircleOfFifthsScale(maxCloseness: number) {\r\n\r\n        const n = randomIntFromInterval(1, maxCloseness)\r\n\r\n        // jump fifths or fourths\r\n        const jumpFifhts = randomIntFromInterval(0, 100) < 50\r\n\r\n        let result = this as SpecificScale\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            result = jumpFifhts ? result.FifthJump : result.FourthJump\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    get RandomProgression() {\r\n        const bars = 4 //randomIntFromInterval(2, 6)\r\n        const maxPerBar = 2\r\n\r\n        const progression = []\r\n\r\n        let last\r\n        for (let i = 0; i < bars; i++) {\r\n\r\n            const bar: SpecificChord | null[] = []\r\n            progression.push(bar)\r\n\r\n            for (let j = 0; j < maxPerBar; j++) {\r\n\r\n                const randomNess = randomIntFromInterval(0, 100)\r\n                if (randomNess < 50 && j !== 0) {\r\n                    bar.push(null)\r\n                } else {\r\n                    const next = randomFromArray(this.tetrads, [last])\r\n                    bar.push(next)\r\n                    last = next\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return progression\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function generateSpecificScales() {\r\n    const result = []\r\n\r\n\r\n    for (const note of notes) {\r\n        for (const scale of scales) {\r\n            result.push(new SpecificScale(note, scale))\r\n        }\r\n    }\r\n\r\n    return result\r\n\r\n}","\r\nimport { Subject } from \"rxjs\";\r\nimport { ISubscribable } from \"../components/useRerenderOnSubscribableChange\";\r\nimport { BarChords } from \"./bar\";\r\nimport { BpmRunner } from \"./BpmRunner\";\r\nimport { randomIntFromInterval } from \"./helper\";\r\nimport { Part  } from \"./part\";\r\n\r\n\r\n// global settings:\r\n\r\n// how many parts\r\n// how many key changes\r\n// start key\r\n// bpm\r\n// part repetition / order\r\n\r\nexport enum PartIndex {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n}\r\n\r\n\r\nexport class Tune implements  ISubscribable {\r\n\r\n    onChange = new Subject<any>()\r\n\r\n    parts: Part[] = []\r\n    partOrder:number[]\r\n\r\n\r\n    get partsInOrder() : Part[] {\r\n        return this.partOrder.map(i => {\r\n            return this.parts[i]\r\n        })\r\n    }\r\n\r\n    public rebuildParts() {\r\n        this.parts.forEach(part => part.init())\r\n        this.onChange.next(0)\r\n    }\r\n\r\n    public randomPartsOrder(howMany:number=8) {\r\n\r\n        const newPartsOrder = []\r\n        for (let i = 0;i<howMany;i++) {\r\n            newPartsOrder.push(randomIntFromInterval(0,2))\r\n        }\r\n        this.partOrder = newPartsOrder\r\n        this.rebuildParts()\r\n\r\n    }\r\n\r\n    constructor() {\r\n        this.addPart()\r\n        this.addPart()\r\n        this.addPart()\r\n        this.partOrder = [\r\n            PartIndex.A,\r\n            PartIndex.A,\r\n            PartIndex.B,\r\n            PartIndex.C,\r\n        ]\r\n    }\r\n\r\n    public setPartOrder(array:number[]) {\r\n        this.partOrder = array\r\n        this.onChange.next(0)\r\n    }\r\n\r\n    addPart() {\r\n        const newPart =  new Part(this.parts[this.parts.length-1], this.parts.length)\r\n        this.parts = [...this.parts, newPart]\r\n\r\n        // Propagate part change further to tune change\r\n        newPart.onChange.subscribe(this.onChange)\r\n    }\r\n\r\n    removePart(part: Part) {\r\n        this.parts = this.parts.filter(p => part !== p)\r\n    }\r\n\r\n\r\n\r\n\r\n}","import {  Chords } from \"./chords\";\r\nimport { randomIntFromInterval, withProbability } from \"./helper\";\r\nimport { IRandomConfig } from \"./configs/configs\"\r\n\r\nimport { SpecificChord } from \"./specificChords\";\r\nimport { Part } from \"./part\";\r\nimport { ConfigValue } from \"./configs/settings\";\r\nimport { SpecificScale } from \"./specificScales\";\r\nimport { Notes } from \"./notes\";\r\nimport { Scales } from \"./scales\";\r\nimport { SpecificInterval } from \"./specificIntervals\";\r\nimport { Intervals } from \"./intervals\";\r\n\r\nexport class ChordProgression {\r\n\r\n    chords\r\n    chordsCount\r\n    counter_251\r\n    twoFiveOnes\r\n    constructor(chords: SpecificChord[], counter_251: number, twoFiveOnes: SpecificChord[][]) {\r\n        this.chords = chords\r\n        this.chordsCount = chords.length\r\n        this.counter_251 = counter_251\r\n        this.twoFiveOnes = twoFiveOnes\r\n    }\r\n\r\n}\r\n\r\nexport class ChordProgressionCreator {\r\n\r\n    // This function creates the chord progression that is later mapped to bars (BarsCreator)\r\n\r\n    // Config is evaluated here.\r\n\r\n    // IMPLEMENT CONFIG CONSEQUENCES HERE\r\n    public static createChordProgression(part: Part, config: IRandomConfig) {\r\n\r\n        const scale = part.scale\r\n\r\n        let chords = []\r\n        const twoFiveOnes = []\r\n\r\n\r\n        const barsCount = config.HowManyBars.value\r\n        const maxChordsPerBar = config.MaxChordsPerBar.value\r\n        let counter_251 = 0\r\n\r\n        // Minimum one \r\n        const chordsCount = randomIntFromInterval(barsCount /* / 2 */, (maxChordsPerBar * barsCount))\r\n\r\n        let last;\r\n        while (chords.length < chordsCount) {\r\n\r\n            // 251\r\n            if (withProbability(config.JazzyProgressionness.value, chordsCount >= 3)) {\r\n                // major or minor?\r\n                const major = randomIntFromInterval(0, 1)\r\n                let twoFiveOne = []\r\n                if (major) {\r\n                    twoFiveOne = [\r\n                        scale.getStepTetrad(2),\r\n                        scale.getStepTetrad(5),\r\n                        scale.getStepTetrad(1)\r\n                    ]\r\n                    last = scale.getStepTetrad(1)\r\n                } else {\r\n                    twoFiveOne = [\r\n                        scale.getStepTetrad(7),\r\n                        new SpecificChord(scale.getStepTetrad(3).rootNote, Chords.Chord7),\r\n                        scale.getStepTetrad(6)\r\n                    ]\r\n                    last = scale.getStepTetrad(6)\r\n                }\r\n                chords.push(twoFiveOne[0])\r\n                chords.push(twoFiveOne[1])\r\n                chords.push(twoFiveOne[2])\r\n\r\n                console.log(\"added 2 5 1 !\")\r\n                counter_251 = counter_251 + 1\r\n                twoFiveOnes.push(twoFiveOne)\r\n\r\n            }\r\n\r\n            // Random single chord\r\n            let newChord = scale.getRandomTetrad(last)\r\n\r\n            // if (withProbability(config.ChordComplexity.value)) {\r\n            //     newChord = scale.getRandomCrzyChord().withContext(scale)\r\n            // }\r\n\r\n\r\n\r\n            // UseAlwaysMajorThirdOnStep3\r\n            if (newChord.step === 3 && config.UseAlwaysMajorThirdOnStep3.value) {\r\n                newChord = new SpecificChord(newChord.rootNote, Chords.Chord7)\r\n            }\r\n            // if (newChord.step === 4 ) {\r\n            //     if (withProbability(config.ChordComplexity.value, true)) {\r\n\r\n            //         newChord = new SpecificChord(newChord.rootNote, Chords.Chord7Sharp11, scale, \"mixo #11\")\r\n            //         console.log(\"ccc\", newChord)\r\n            //     }\r\n            // }\r\n\r\n            // if (withProbability(config.UseHarmonicMinorFromStep6.value)) {\r\n                \r\n            //     const harmonicMinorFromStep6 = new SpecificScale(SpecificInterval.calculateInterval(scale.rootNote, Intervals.MajorSixth), Scales.HarmonicMinor)\r\n            //     newChord = harmonicMinorFromStep6.getRandomCrzyChord().withContext(harmonicMinorFromStep6)\r\n            //     // console.log(\"harmonic melodic\", newChord)\r\n\r\n            // }\r\n\r\n            // if (withProbability(config.UserMelodicMinorFromStep3.value)) {\r\n            //     const melodicMinorFromStep3 = new SpecificScale(SpecificInterval.calculateInterval(scale.rootNote, Intervals.MinorThird), Scales.MelodicMinor)\r\n            //     newChord = melodicMinorFromStep3.getRandomCrzyChord().withContext(melodicMinorFromStep3)\r\n            //     // console.log(\"harmonic melodic\", newChord)\r\n            // }\r\n\r\n            last = newChord\r\n\r\n            chords.push(newChord)\r\n\r\n\r\n        }\r\n\r\n        if (config.DoNotUseStep7.value) {\r\n            chords = chords.map(chord => {\r\n                if (chord.step === 7) {\r\n                    return scale.getRandomTriad()\r\n                }\r\n                return chord\r\n            })\r\n            chords = chords.map(chord => chord.chord === Chords.MinorB5 ? scale.getRandomTetrad() : chord)\r\n            chords = chords.map(chord => chord.chord === Chords.Minor7b5 ? scale.getRandomTetrad() : chord)\r\n            chords = chords.map(chord => chord.chord === Chords.Minor7b5 ? scale.getRandomTetrad() : chord)\r\n            chords = chords.map(chord => chord.chord === Chords.Minor7b5 ? scale.getRandomTetrad() : chord)\r\n        }\r\n\r\n        \r\n\r\n        // chords.forEach(chord => chord.)\r\n\r\n        console.log(\"Random chord progression created\", chords)\r\n\r\n        return new ChordProgression(chords, counter_251, twoFiveOnes)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","\r\n\r\n// a part:\r\n\r\n\r\nimport { Subject } from \"rxjs\"\r\nimport { ISubscribable } from \"../components/useRerenderOnSubscribableChange\"\r\nimport { Bar, BarsCreator } from \"./bar\"\r\nimport { IRandomConfig, SubscribableRandomConfig } from \"./configs/configs\"\r\n\r\nimport { Notes } from \"./notes\"\r\nimport { ChordProgressionCreator } from \"./progressions\"\r\nimport { Scales } from \"./scales\"\r\n\r\nimport { SpecificScale } from \"./specificScales\"\r\n\r\n\r\n\r\nexport class Part implements ISubscribable {\r\n\r\n    scale: SpecificScale\r\n    bars: Bar[]\r\n    chordProgression\r\n    onChange = new Subject()\r\n    index: number\r\n    lastPart\r\n\r\n    subscribableConfig = new SubscribableRandomConfig()\r\n\r\n    // We need the last part to get the new scale (circle of fifth closeness).\r\n    constructor(lastPart: Part | null, index: number) {\r\n\r\n        this.index = index\r\n        this.lastPart = lastPart\r\n        // Here we say: When a config changes, redo the whole create tune procedure!\r\n        // The same rerender structure ist used for the userInputs And \r\n        this.subscribableConfig.onChange.subscribe(() => {\r\n            this.init()\r\n\r\n            // The part can be subscribed by the rendering.\r\n            this.onChange.next(this)\r\n        })\r\n\r\n        // Change if last part changed and DEPENDENCYS\r\n        if (lastPart) {\r\n            lastPart.onChange.subscribe(() => {\r\n                this.init()\r\n\r\n                this.onChange.next(null)\r\n            })\r\n        }\r\n\r\n        // initiate with random, we run init() anyways\r\n        const config = this.subscribableConfig.config\r\n        this.scale = new SpecificScale(Notes.Random, Scales.Major)\r\n        this.chordProgression = ChordProgressionCreator.createChordProgression(this, config)\r\n        this.bars = BarsCreator.mapChordsToBars(this.chordProgression, config)\r\n\r\n        this.init()\r\n\r\n\r\n        // for (let i = 0; i < config.HowManyBars; i++) {\r\n        //     this.bars.push(new Bar(lastPart, this, config))\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    init() {\r\n        const config = this.subscribableConfig.config\r\n\r\n        const lastPart = this.lastPart\r\n        // Determine the scale of the part.\r\n        // Currently only circle of fifth and regular major keys\r\n        if (lastPart && config.KeyChange.value === false) {\r\n            this.scale = lastPart.scale\r\n        } else if (!lastPart) {\r\n            this.scale = new SpecificScale(Notes.Random, Scales.Major)\r\n        } else {\r\n            this.scale = lastPart.scale.getCloseCircleOfFifthsScale(config.CircleOfFifthMaxCloseness.value)\r\n        }\r\n\r\n        this.chordProgression = ChordProgressionCreator.createChordProgression(this, config)\r\n        this.bars = BarsCreator.mapChordsToBars(this.chordProgression, config)\r\n        this.onChange.next(0)\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","\r\nimport { BpmRunner } from \"./BpmRunner\";\r\nimport { Tune } from \"./tune\";\r\n\r\n\r\nclass MainControllerSingleton {\r\n\r\n    tune = new Tune()\r\n\r\n    constructor() {\r\n\r\n        console.log(this.tune)\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nconst MainController =  new MainControllerSingleton()\r\n\r\nexport default MainController","import { useEffect, useState } from \"react\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n\r\nexport interface ISubscribable {\r\n    onChange: Subject<any>\r\n}\r\n\r\n\r\nexport function useRerenderOnSubscribableChange(subscribable: ISubscribable) {\r\n\r\n    const [counter, setCounter] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n\r\n        if (subscribable) {\r\n            const sub = subscribable.onChange.subscribe(() => {\r\n                // console.log(\"rerender\", subscribable)\r\n                setCounter((counter + 1))\r\n            })\r\n            return () => sub.unsubscribe()\r\n        }\r\n\r\n    }, [subscribable, counter, setCounter])\r\n\r\n\r\n\r\n    return counter\r\n\r\n}","\r\n\r\nimport { SettingName } from \"../../defs/configs/configs\"\r\nimport { ConfigValue, NumberSetting, SettingType } from \"../../defs/configs/settings\"\r\nimport { createNumberArray, kebabize } from \"../../defs/helper\"\r\nimport { Part } from \"../../defs/part\"\r\nimport { useRerenderOnSubscribableChange } from \"../useRerenderOnSubscribableChange\"\r\nimport classes from \"./PartConfig.module.css\"\r\n\r\ninterface IPartConfigProps {\r\n    part: Part\r\n}\r\n\r\nexport default function PartConfig(props: IPartConfigProps) {\r\n\r\n    const part = props.part\r\n    const config = part.subscribableConfig.config\r\n\r\n    useRerenderOnSubscribableChange(part)\r\n\r\n    // Rerender on config change\r\n    useRerenderOnSubscribableChange(part.subscribableConfig)\r\n\r\n\r\n    return <div className={classes.container}>\r\n\r\n        <button onClick={e => part.init()}>Rebuild</button>\r\n\r\n        {config.entries.map(entry => {\r\n\r\n            const [name, setting] = entry\r\n\r\n            if (part.index === 0 && setting.name === SettingName.CircleOfFifthMaxCloseness) return null\r\n            if (part.index === 0 && setting.name === SettingName.KeyChange) return null\r\n\r\n            return <div className={classes.setting}>\r\n\r\n                <div className={classes.name}>\r\n\r\n                    {kebabize(name).replaceAll(\"-\", \" \")}\r\n\r\n                </div>\r\n\r\n                <div className={classes.input}>\r\n\r\n                    {setting.type === SettingType.BooleanSetting\r\n                        &&\r\n\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={setting.value as boolean}\r\n                            onChange={e => {\r\n                                setting.value = e.target.checked\r\n                            }}\r\n\r\n                        ></input>\r\n\r\n                    }\r\n\r\n                    {setting.type === SettingType.ConfigValueSetting\r\n                        &&\r\n\r\n                        <select onChange={e => setting.value = e.target.value as ConfigValue} value={setting.value as string}>\r\n                            {Object.values(ConfigValue).map(value => {\r\n                                return <option key={value}>{value}</option>\r\n                            })}\r\n                        </select>\r\n\r\n                    }\r\n\r\n                    {setting.type === SettingType.NumberSetting\r\n                        &&\r\n\r\n                        <select onChange={e => setting.value = parseFloat(e.target.value)} value={setting.value.toString()}>\r\n                            {createNumberArray((setting as unknown as NumberSetting).min, (setting as unknown as NumberSetting).max).map(value => {\r\n                                return <option key={value.toString()}>{value}</option>\r\n                            })}\r\n                        </select>\r\n\r\n                    }\r\n\r\n                </div>\r\n\r\n                <div className={classes.info}>\r\n                \r\n                    {setting.name === SettingName.JazzyProgressionness && part.chordProgression.counter_251}\r\n                \r\n                </div>\r\n\r\n            </div>\r\n\r\n        })}\r\n\r\n        <div className={classes.resultName}>\r\n        \r\n\r\n        { \"Result: \"+part.scale.name}\r\n\r\n        </div>\r\n\r\n        <div className={classes.result}>\r\n        \r\n            {part.bars.map(bar => {\r\n                return <div className={classes.bar}>\r\n                \r\n                    {bar.chords.map(chord => {\r\n                        return <div className={classes.chord}>\r\n                        \r\n                            {chord && chord.step + \" - \"}\r\n                            {chord && chord.render}\r\n                        \r\n                        </div>\r\n                    })}\r\n                \r\n                </div>\r\n            })}\r\n        \r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import { Subject } from \"rxjs\";\r\nimport { ISubscribable } from \"../components/useRerenderOnSubscribableChange\";\r\n\r\nfunction getTimeInterval(bpm: number) {\r\n    return (60 / bpm) * 1000;\r\n}\r\n\r\n\r\nexport class BpmRunner implements ISubscribable {\r\n    private _renderCount = 0\r\n    private _bpm: number = 60\r\n    private _timeInterval: number = getTimeInterval(this._bpm)\r\n    private _runningInterval: NodeJS.Timeout | undefined;\r\n    onChange = new Subject<number>()\r\n\r\n    private _beforeNext\r\n\r\n    constructor(bpm: number = 60, beforeNext: () => void) {\r\n\r\n        this._beforeNext = beforeNext\r\n        this.bpm = bpm\r\n        this._startInterval()\r\n    }\r\n\r\n    public resetRenderCount() {\r\n        this._renderCount = 0\r\n    }\r\n\r\n    public stop() {\r\n        if (this._runningInterval) {\r\n            clearInterval(this._runningInterval)\r\n        }\r\n    }\r\n\r\n    private _rerender() {\r\n        this._renderCount = this._renderCount + 1\r\n        this.onChange.next(this._renderCount)\r\n    }\r\n\r\n\r\n    public get bpm() {\r\n        return this._bpm\r\n    }\r\n\r\n    public getPosition(barsCount: number, chordsPerBar: number) {\r\n        const allPositions = barsCount * chordsPerBar\r\n        const position = this._renderCount % allPositions\r\n\r\n\r\n        let counter = 0\r\n        while (counter < allPositions) {\r\n\r\n            if (counter === position || (counter < position && (counter+chordsPerBar)>position) ) {\r\n\r\n                const isLastOne = position === allPositions-1\r\n\r\n                const chordInBar = position - counter\r\n                const result = {\r\n                    bar:counter/chordsPerBar,\r\n                    chordInBar:chordInBar,\r\n                    isLastOne\r\n                }\r\n                return result\r\n            }\r\n\r\n            counter = counter + chordsPerBar\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    public set bpm(bpm: number) {\r\n        this._bpm = bpm\r\n        this._timeInterval = getTimeInterval(bpm)\r\n        this._startInterval()\r\n        this._rerender()\r\n\r\n    }\r\n\r\n    private _startInterval() {\r\n        if (this._runningInterval) {\r\n            clearInterval(this._runningInterval)\r\n        }\r\n\r\n        this._runningInterval = setInterval(() => {\r\n            this._beforeNext()\r\n            this._rerender()\r\n\r\n        }, this._timeInterval)\r\n    }\r\n\r\n}","import { Bar } from \"../../defs/bar\"\r\nimport { BpmRunner } from \"../../defs/BpmRunner\"\r\nimport MainController from \"../../defs/mainController\"\r\nimport { useRerenderOnSubscribableChange } from \"../useRerenderOnSubscribableChange\"\r\nimport classes from \"./Sheet.module.css\"\r\n\r\nlet runner = new BpmRunner(40, ()=>{\r\n    // console.log(\"rerender runner\")\r\n})\r\nrunner.stop()\r\nexport default function Sheet() {\r\n\r\n    useRerenderOnSubscribableChange(MainController.tune)\r\n\r\n    const tune = MainController.tune\r\n\r\n    useRerenderOnSubscribableChange(runner)\r\n\r\n    \r\n    const bars :Bar[] = tune.partsInOrder.map(part => {\r\n        return part.bars\r\n    }).reduce((prev, next) => prev.concat(next))\r\n    \r\n    const position =  runner.getPosition(bars.length, tune.parts[0].subscribableConfig.config.MaxChordsPerBar.value)\r\n    \r\n    console.log(position)\r\n    // if (position?.isLastOne) {\r\n    //     tune.randomPartsOrder()\r\n    //     runner.resetRenderCount()\r\n    // }\r\n\r\n    return <div className={classes.container}>\r\n\r\n        {/* {(position && position?.bar) + \" - \"+ (position && position?.chordInBar)} */}\r\n    \r\n        {bars.map((bar, i) => {\r\n\r\n\r\n            \r\n            return <div className={classes.bar}>\r\n        \r\n                {bar.chords.map((chord, j) => {\r\n                    \r\n                    const presentIn = chord?.presentInScalesAsString\r\n                    const isCurrentPosition = position && position.bar === i && position.chordInBar === j\r\n                    \r\n                    return <div className={classes.chord} title={presentIn}>\r\n                        \r\n\r\n                        {chord?.render}\r\n                    \r\n                        <div className={classes.currentPosition}\r\n                            style={{\r\n                                display:isCurrentPosition ? \"\" : \"none\"\r\n                            }}\r\n                        />\r\n\r\n                    </div>\r\n                })}\r\n            \r\n            </div>\r\n        })}\r\n    \r\n\r\n    </div>\r\n\r\n}","import { useState } from \"react\"\r\nimport MainController from \"../../defs/mainController\"\r\nimport PartConfig from \"../PartConfig/PartConfig\"\r\nimport Sheet from \"../Sheet/Sheet\"\r\nimport { useRerenderOnSubscribableChange } from \"../useRerenderOnSubscribableChange\"\r\nimport classes from \"./main.module.css\"\r\n\r\n\r\nexport default function Main() {\r\n\r\n    const [partsString, setPartsString] = useState(MainController.tune.partOrder.toString().replaceAll(\",\", \"\"))\r\n\r\n    useRerenderOnSubscribableChange(MainController.tune)\r\n\r\n    // if (MainController.tune.partOrder.toString().replaceAll(\",\", \"\") !== partsString) {\r\n    //     setPartsString(MainController.tune.partOrder.toString().replaceAll(\",\", \"\"))\r\n    // }\r\n\r\n    return <div className={classes.container}>\r\n\r\n\r\n\r\n        <div className={classes.headBar}>\r\n\r\n\r\n            <div className={classes.order}>\r\n\r\n                parts order:\r\n\r\n            </div>\r\n\r\n            <input type=\"string\"\r\n                value={partsString}\r\n                onChange={e => setPartsString(e.target.value)}\r\n                onBlur={e => {\r\n                    const newPartOrder = partsString.split(\"\").map(s => parseFloat(s))\r\n                    MainController.tune.setPartOrder(newPartOrder)\r\n                }}\r\n            />\r\n\r\n            <button onClick={e => MainController.tune.randomPartsOrder()}>Random</button>\r\n\r\n            {MainController.tune.partOrder.toString().replaceAll(\",\", \"\")}\r\n\r\n        </div>\r\n\r\n        <div className={classes.row}>\r\n\r\n\r\n\r\n\r\n            <div className={classes.parts}>\r\n\r\n                {MainController.tune.parts.map(part => {\r\n\r\n                    return <PartConfig part={part} />\r\n\r\n                })}\r\n\r\n            </div>\r\n\r\n            <div className={classes.tune}>\r\n\r\n                {/* <TuneRender tune={MainController.tune} /> */}\r\n                <Sheet></Sheet>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Main from './components/Main/Main';\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <Main></Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  // {/* </React.StrictMode>, */}\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PartConfig_container__2duve\",\"setting\":\"PartConfig_setting__3oS4O\",\"name\":\"PartConfig_name__5LsEd\",\"result\":\"PartConfig_result__166_7\",\"bar\":\"PartConfig_bar__xnho3\",\"chord\":\"PartConfig_chord__1Egbv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"main_container__1eZB0\",\"headBar\":\"main_headBar__1LHD4\",\"order\":\"main_order__1-XLA\",\"row\":\"main_row__2Wz0C\",\"parts\":\"main_parts__3tdU4\",\"tune\":\"main_tune__2sVqZ\"};"],"sourceRoot":""}