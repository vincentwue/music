{"version":3,"sources":["components/Sheet/Sheet.module.css","defs/configs/settings.ts","defs/helper.ts","defs/bar.ts","defs/configs/configs.ts","defs/notes.ts","defs/intervals.ts","defs/chords.ts","defs/specificChords.ts","defs/progressions.ts","defs/scales.ts","defs/specificIntervals.ts","defs/specificScales.ts","defs/part.ts","defs/tune.ts","defs/mainController.ts","components/useRerenderOnSubscribableChange.ts","components/PartConfig/PartConfig.tsx","defs/BpmRunner.ts","components/Sheet/Sheet.tsx","components/Tune/Tune.tsx","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/PartConfig/PartConfig.module.css","components/Tune/Tune.module.css","components/Main/main.module.css"],"names":["module","exports","ConfigValue","UserInput","SettingType","Setting","value","type","name","onSettingChanged","Subject","_value","this","console","log","next","NumberSetting","min","max","ConfigValueSetting","BooleanSetting","NumberArraySetting","randomIntFromInterval","Math","floor","random","randomFromArray","array","not","filterArray","filter","e","includes","length","withProbability","equation","None","Rare","Medium","WellDone","Insane","getScaleFromNote","n","notes","noteIndex","indexOf","slice","createNumberArray","start","finish","res","i","push","SettingName","BarsCreator","bars","config","AlwaysHaveChordOnFirstQuarter","every","bar","some","MaxChordsPerBar","chordProgression","barChords","divideChordsToBars","map","fillChordsWithNull","doesBarChordsFullfillAllConditions","result","Bar","error","copiedChords","chords","HowManyBars","randomHowMany","MinChordsPerBar","newBar","chordsPerBar","randomIndex","ScaleType","RandomConfig","JazzyProgressionness","CircleOfFifthMaxCloseness","UseAlwaysMajorThirdOnStep3","ChordComplexity","KeyChange","DoNotUseSteps","EndWith6Or1","RhythmCrzyness","EmptyBars","Object","entries","SubscribableRandomConfig","onChange","setting","subscribe","Note","flat","sharp","id","scaleType","Sharp","Notes","note","C","F","Bb","Eb","Ab","Db","Gb","Flat","D","E","G","A","B","values","Interval","steps","standardSymbol","Intervals","PerfectUnison","MinorSecond","MajorSecond","MinorThird","MajorThird","PerfectForth","Tritone","PerfectFifth","MinorSixth","MajorSixth","MinorSeventh","MajorSeventh","intervals","Chord","Chords","Minor","Major","Major7","Chord7","Minor7","Minor7b5","Chord7b9","Chord7Sharp5","Chord7Sharp11","PowerChord","MajorB13","Dim7","b9b13","MinorMajor7","Minor6","Major6","Minorb6","Majorb6","Minor9","Major9","Minorb9","Majorb9","Sus4","NineSus4","Major7b6","SpecificChord","rootNote","chord","context","presentInScales","calculateNotesForChord","render","calcNotes","interval","ChordProgression","counter_251","twoFiveOnes","chordsCount","ChordProgressionCreator","part","last","scale","barsCount","twoFiveOne","getStepTetrad","newChord","getRandomTetrad","step","Scale","modes","stepsMapped","tmp","Scales","scales","HarmonicMinor","MelodicMinor","Chromatic","MinorPentatonic","MajorPentatonic","MinorPentatonicBlues","MajorPentatonicBlues","BluesRocknRoll","BBKingBlues","IntervalDirection","SpecificInterval","root","target","direction","Up","intervalBetweenNotes","rootIndex","targetIndex","SpecificScale","Random","mode","tetrads","calculateScaleNotes","addTetrads","scaleNotes","chordIntervals","chordNote","foundChord","specificChord","calculateInterval","maxCloseness","jumpFifhts","FifthJump","FourthJump","progression","j","PartIndex","Part","lastPart","index","subscribableConfig","init","createChordProgression","mapChordsToBars","getCloseCircleOfFifthsScale","Tune","parts","partOrder","addPart","forEach","howMany","newPartsOrder","rebuildParts","newPart","p","MainController","tune","useRerenderOnSubscribableChange","subscribable","useState","counter","setCounter","useEffect","sub","unsubscribe","PartConfig","props","className","classes","container","onClick","entry","str","split","letter","idx","toUpperCase","toLowerCase","join","replaceAll","input","checked","parseFloat","toString","info","resultName","getTimeInterval","bpm","BpmRunner","beforeNext","_renderCount","_bpm","_timeInterval","_runningInterval","_beforeNext","_startInterval","clearInterval","_rerender","allPositions","position","chordInBar","isLastOne","setInterval","runner","Sheet","partsInOrder","reduce","prev","concat","getPosition","isCurrentPosition","currentPosition","style","display","TuneRender","rootNoteName","Main","partsString","setPartsString","headBar","order","onBlur","newPartOrder","s","setPartOrder","randomPartsOrder","row","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.53ab24cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Sheet_container__tDcUl\",\"bar\":\"Sheet_bar__18Oiv\",\"chord\":\"Sheet_chord__94HjD\",\"currentPosition\":\"Sheet_currentPosition__2u0r5\"};","import { Subject } from \"rxjs\";\r\nimport { SettingName } from \"./configs\";\r\n\r\n\r\nexport enum ConfigValue {\r\n    None = \"none\",\r\n    Rare = \"rare\",\r\n    Medium = \"medium\",\r\n    WellDone = \"well done\",\r\n    Insane = \"insane\"\r\n}\r\n\r\n\r\nexport enum UserInput {\r\n    CheckBox = \"checkbox\",\r\n    Select = \"select\",\r\n    NumberDropdown = \"numberDropdown\"\r\n}\r\n\r\nexport type ISettingValue = number | boolean | ConfigValue | number[]\r\n\r\nexport interface ISetting {\r\n    value: ISettingValue\r\n    userInput: UserInput\r\n    onSettingChanged: Subject<any>\r\n    type: SettingType\r\n    name:SettingName\r\n}\r\n\r\nexport enum SettingType {\r\n    ConfigValueSetting = \"ConfigValueSetting\",\r\n    NumberArraySetting = \"NumberArraySetting\",\r\n    NumberSetting = \"NumberSetting\",\r\n    BooleanSetting = \"BooleanSetting\",\r\n}\r\n\r\nexport abstract class Setting<T> {\r\n\r\n    type:SettingType\r\n    onSettingChanged: Subject<T> = new Subject<T>()\r\n    _value: T;\r\n    name:SettingName\r\n\r\n    constructor(value: T, type:SettingType, name:SettingName) {\r\n        this._value = value\r\n        this.type = type\r\n        this.name = name\r\n    }\r\n\r\n    set value(value: T) {\r\n        this._value = value\r\n        console.log(\"value set\", value)\r\n        this.onSettingChanged.next(value)\r\n    }\r\n\r\n    get value() {\r\n        return this._value\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class NumberSetting extends Setting<number> {\r\n\r\n    min\r\n    max\r\n\r\n    constructor(value: number, min: number, max: number, name:SettingName) {\r\n        super(value, SettingType.NumberSetting, name)\r\n\r\n        this.value = value\r\n        this.min = min\r\n        this.max = max\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport class ConfigValueSetting extends Setting<ConfigValue> {\r\n\r\n\r\n    constructor(value: ConfigValue, name:SettingName) {\r\n        super(value, SettingType.ConfigValueSetting, name)\r\n\r\n    }\r\n\r\n\r\n}\r\nexport class BooleanSetting extends Setting<boolean> {\r\n\r\n\r\n    constructor(value: boolean, name:SettingName) {\r\n        super(value, SettingType.BooleanSetting, name)\r\n\r\n    }\r\n\r\n\r\n}\r\nexport class NumberArraySetting extends Setting<number[]> {\r\n\r\n\r\n    constructor(value: number[], name:SettingName) {\r\n        super(value, SettingType.NumberArraySetting, name)\r\n\r\n    }\r\n\r\n\r\n}\r\n","import { ConfigValue } from \"./configs/settings\";\r\nimport { Note } from \"./notes\";\r\n\r\n/**\r\n * random int -> min and max included \r\n * @param min \r\n * @param max \r\n * @returns \r\n */\r\nexport function randomIntFromInterval(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function randomFromArray(array: any[], not: any[] = []) {\r\n    if (!not) not = []\r\n    const filterArray = array.filter(e => !not.includes(e))\r\n    return filterArray[Math.floor(Math.random() * filterArray.length)];\r\n}\r\n\r\nexport function getArrayOfSize(n : number) {\r\n   return Array.apply(null, Array(n)).map(function (x, i) { return i; })\r\n}\r\n\r\nexport function withProbability(value:ConfigValue, equation:boolean=true) {\r\n\r\n    const random = randomIntFromInterval(0,100)\r\n\r\n    if (value === ConfigValue.None || !equation) return false\r\n\r\n    else if (value === ConfigValue.Rare) {\r\n        return random > 80\r\n    }\r\n    else if (value === ConfigValue.Medium) {\r\n        return random > 60\r\n    }\r\n    else if (value === ConfigValue.WellDone) {\r\n        return random > 40\r\n    }\r\n    else if (value === ConfigValue.Insane) {\r\n        return random > 20\r\n    }\r\n\r\n}\r\n\r\nexport function getScaleFromNote(n:Note, notes:Note[]) {\r\n    const noteIndex = notes.indexOf(n)\r\n    const calcNotes = [...notes.slice(noteIndex), ...notes.slice(0, noteIndex)]\r\n    return calcNotes\r\n}\r\n\r\n\r\nexport function kebabize(str:string) {\r\n    return str.split('').map((letter, idx) => {\r\n      return letter.toUpperCase() === letter\r\n       ? `${idx !== 0 ? '-' : ''}${letter.toLowerCase()}`\r\n       : letter;\r\n    }).join('');\r\n }\r\n\r\nexport function createNumberArray(start:number, finish?:number) {\r\n\r\n    if (!finish) {\r\n        finish = start\r\n        start = 0\r\n    }\r\n\r\n    const res = []\r\n    for (let i = start;i<finish;i++) {\r\n        res.push(i)\r\n    }   \r\n\r\n    return res\r\n\r\n}","\r\nimport { config } from \"rxjs\";\r\nimport { randomIntFromInterval } from \"./helper\";\r\nimport { IRandomConfig } from \"./configs/configs\"\r\n\r\nimport { ChordProgression } from \"./progressions\";\r\nimport { SpecificChord } from \"./specificChords\";\r\n\r\n\r\nexport class BarsCreator {\r\n\r\n    // Config is evaluated here.\r\n    // These conditions need to get met to accept\r\n    // how the program divided the chords into bars. \r\n\r\n    \r\n    // IMPLEMENT CONFIG CONSEQUENCES HERE\r\n    private static doesBarChordsFullfillAllConditions(bars: BarChords[], config:IRandomConfig) {\r\n\r\n        if (config.AlwaysHaveChordOnFirstQuarter) {\r\n            if (!bars.every(bar => bar[0])) {\r\n                return false\r\n            }\r\n        }\r\n\r\n        if (bars.some(bar => bar.length > config.MaxChordsPerBar.value)) {\r\n            return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    public static mapChordsToBars(chordProgression: ChordProgression, config: IRandomConfig) {\r\n\r\n        for (let i = 0; i < 10000; i++) {\r\n\r\n            // Here we add the conditions that the tune should fulfill\r\n\r\n            const dividedChords = this.divideChordsToBars(chordProgression, config)\r\n            const barChords = dividedChords.map(bar => this.fillChordsWithNull(bar, config.MaxChordsPerBar.value))\r\n\r\n\r\n            const fulfilledAllConditions = this.doesBarChordsFullfillAllConditions(barChords, config)\r\n\r\n            if (fulfilledAllConditions) {\r\n\r\n                // Take this random run\r\n                \r\n                const result =  barChords.map(barChords => new Bar(barChords, config))\r\n                console.log(\"Found bar division after \" + i + \" iterations.\", result)\r\n\r\n                return result\r\n\r\n            } else {\r\n\r\n                // Generate new and \r\n                continue;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        console.error(\"Could not find chords! 10000 iterations too less?\", { chordProgression, config })\r\n\r\n        return []\r\n\r\n    }\r\n\r\n\r\n    private static divideChordsToBars(chordProgression: ChordProgression, config: IRandomConfig) {\r\n\r\n        let copiedChords = chordProgression.chords.slice()\r\n        const bars: SpecificChord[][] = []\r\n\r\n        for (let i = 0; i < config.HowManyBars.value; i++) {\r\n            const randomHowMany = randomIntFromInterval(config.MinChordsPerBar.value, config.MaxChordsPerBar.value)\r\n            const newBar = copiedChords.slice(0, randomHowMany)\r\n            bars.push(newBar)\r\n            copiedChords = copiedChords.slice(randomHowMany, copiedChords.length)\r\n        }\r\n\r\n        return bars\r\n\r\n    }\r\n\r\n    private static fillChordsWithNull(chords: SpecificChord[], chordsPerBar: number) : BarChords {\r\n\r\n        let res: (SpecificChord | null)[] = chords.slice()\r\n\r\n        while (res.length < chordsPerBar) {\r\n            const randomIndex = randomIntFromInterval(0, res.length)\r\n            res = [\r\n                ...res.slice(0, randomIndex),\r\n                null,\r\n                ...res.slice(randomIndex, res.length),\r\n            ]\r\n        }\r\n\r\n        return res\r\n\r\n    }\r\n\r\n}\r\n\r\nexport type BarChord = SpecificChord | null\r\nexport type BarChords = BarChord[]\r\n\r\nexport class Bar {\r\n\r\n    chords: BarChords\r\n\r\n\r\n    constructor(chords: BarChords, config: IRandomConfig) {\r\n\r\n\r\n\r\n        this.chords = chords\r\n\r\n    }\r\n\r\n}\r\n\r\n","\r\n\r\n\r\n\r\n// INFOO\r\n\r\nimport { Subject } from \"rxjs\";\r\nimport { ISubscribable } from \"../../components/useRerenderOnSubscribableChange\";\r\nimport { BooleanSetting, ConfigValue, ConfigValueSetting, ISetting, NumberArraySetting, NumberSetting } from \"./settings\";\r\n\r\n// SEE BARSCREATOR AND CHORDPROGRESSIONCREATOR\r\n\r\n// The configs that refer to the chord progression itself\r\n// are considered in the ChordProgressionCreator in the progressions.ts\r\n\r\n// The configs that refer to the division into bars are considered in the\r\n// BarsCreator in the bars.ts\r\n// end with 6 or 1\r\n\r\n// einige settings auf tune ebene heben?\r\n// Was ist wenn eine zwei fünf eins über drei bars geht? oder sogar mehr?\r\n\r\n\r\n// Keine doppelten keys!\r\n\r\n// Gb oder F# auf 50/50 chance stellen\r\n\r\n// jazinezz\r\n// rhythm crazinezz\r\n// tetrads/triads/crazy chords\r\n// bars\r\n// max chords per bar\r\n// circle of fifth closeness\r\n\r\n\r\nexport interface IRandomConfig {\r\n\r\n    // configs that refer to the chordProgression\r\n\r\n    // implemented\r\n    JazzyProgressionness: ConfigValueSetting\r\n    CircleOfFifthMaxCloseness: NumberSetting\r\n    UseAlwaysMajorThirdOnStep3: BooleanSetting\r\n\r\n    // not implemented\r\n    ChordComplexity: ConfigValueSetting\r\n    KeyChange: BooleanSetting\r\n    DoNotUseSteps: NumberArraySetting\r\n    EndWith6Or1: BooleanSetting\r\n\r\n\r\n    // configs that refer to the distribution into bars\r\n\r\n    // implemented\r\n    MaxChordsPerBar: NumberSetting\r\n    MinChordsPerBar: NumberSetting\r\n    HowManyBars: NumberSetting\r\n    AlwaysHaveChordOnFirstQuarter: BooleanSetting\r\n\r\n    //not implemented\r\n    RhythmCrzyness: ConfigValueSetting\r\n    EmptyBars: ConfigValueSetting\r\n\r\n\r\n}\r\n\r\n\r\ntype SettingEntry = [string, ISetting]\r\n\r\nexport enum SettingName {\r\n    JazzyProgressionness = \"JazzyProgressionness\",\r\n    CircleOfFifthMaxCloseness =\"CircleOfFifthMaxCloseness\",\r\n    UseAlwaysMajorThirdOnStep3=\"UseAlwaysMajorThirdOnStep3\",\r\n\r\n    ChordComplexity=\"\",\r\n    KeyChange=\"KeyChange\",\r\n    DoNotUseSteps=\"DoNotUseSteps\",\r\n    EndWith6Or1=\"EndWith6Or1\",\r\n\r\n    MaxChordsPerBar=\"MaxChordsPerBar\",\r\n    MinChordsPerBar=\"MinChordsPerBar\",\r\n    HowManyBars=\"HowManyBars\",\r\n    AlwaysHaveChordOnFirstQuarter=\"AlwaysHaveChordOnFirstQuarter\",\r\n\r\n    RhythmCrzyness=\"RhythmCrzyness\",\r\n    EmptyBars=\"EmptyBars\",\r\n    \r\n}\r\n\r\nexport class RandomConfig implements IRandomConfig {\r\n\r\n        // configs that refer to the chordProgression\r\n\r\n    // implemented\r\n    JazzyProgressionness= new ConfigValueSetting( ConfigValue.Medium, SettingName.JazzyProgressionness)\r\n    CircleOfFifthMaxCloseness= new NumberSetting(3, 1, 6,SettingName.CircleOfFifthMaxCloseness)\r\n    UseAlwaysMajorThirdOnStep3= new BooleanSetting(true, SettingName.JazzyProgressionness)\r\n\r\n    // not implemented\r\n    ChordComplexity= new ConfigValueSetting(ConfigValue.Medium, SettingName.ChordComplexity)\r\n    KeyChange= new BooleanSetting(true, SettingName.KeyChange)\r\n    DoNotUseSteps= new NumberArraySetting([], SettingName.DoNotUseSteps)\r\n    EndWith6Or1= new BooleanSetting(true, SettingName.EndWith6Or1)\r\n\r\n\r\n    // configs that refer to the distribution into bars\r\n\r\n    // implemented\r\n    MaxChordsPerBar= new NumberSetting(2, 1, 8,  SettingName.MaxChordsPerBar)\r\n    MinChordsPerBar= new NumberSetting(1, 0, 4, SettingName.MinChordsPerBar)\r\n    HowManyBars= new NumberSetting(4, 1, 20, SettingName.HowManyBars)\r\n    AlwaysHaveChordOnFirstQuarter= new BooleanSetting(true, SettingName.AlwaysHaveChordOnFirstQuarter)\r\n\r\n    //not implemented\r\n    RhythmCrzyness= new ConfigValueSetting(ConfigValue.Medium, SettingName.RhythmCrzyness)\r\n    EmptyBars= new ConfigValueSetting(ConfigValue.None, SettingName.EmptyBars)\r\n\r\n    get entries() : SettingEntry[] {\r\n        return Object.entries(this)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class SubscribableRandomConfig implements ISubscribable {\r\n\r\n    config = new RandomConfig()\r\n    onChange = new Subject()\r\n\r\n\r\n    constructor() {\r\n\r\n        for (const [, setting] of this.config.entries) {\r\n            \r\n            setting.onSettingChanged.subscribe(()=> {\r\n                console.log(\"config changed\", setting)\r\n                this.onChange.next(null)\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}","import { randomIntFromInterval } from \"./helper\"\r\n\r\nexport class Note {\r\n\r\n    id\r\n    flat\r\n    sharp\r\n\r\n    constructor(flat: string, sharp?: string) {\r\n        this.id = flat\r\n        this.flat = flat\r\n        this.sharp = sharp ?? flat\r\n    }\r\n\r\n    render(scaleType: ScaleType=ScaleType.Sharp) {\r\n        if (scaleType === ScaleType.Sharp) return this.sharp\r\n        else return this.flat\r\n    }\r\n\r\n}\r\n\r\nenum ScaleType {\r\n    Flat = \"flat\",\r\n    Sharp = \"sharp\"\r\n}\r\n\r\nexport class Notes {\r\n    static C = new Note(\"C\")\r\n    static Db = new Note(\"Db\", \"C#\")\r\n    static D = new Note(\"D\")\r\n    static Eb = new Note(\"Eb\", \"D#\")\r\n    static E = new Note(\"E\")\r\n    static F = new Note(\"F\")\r\n    static Gb = new Note(\"Gb\", \"F#\")\r\n    static G = new Note(\"G\")\r\n    static Ab = new Note(\"Ab\", \"G#\")\r\n    static A = new Note(\"A\")\r\n    static Bb = new Note(\"Bb\", \"A#\")\r\n    static B = new Note(\"B\",)\r\n\r\n    public static get Random() {\r\n        return notes[randomIntFromInterval(0, 11)]\r\n    }\r\n\r\n    public static scaleType(note: Note) {\r\n        const flatScales = [\r\n            Notes.C,\r\n            Notes.F,\r\n            Notes.Bb,\r\n            Notes.Eb,\r\n            Notes.Ab,\r\n            Notes.Db,\r\n            Notes.Gb,\r\n        ]\r\n        if (flatScales.includes(note)) return ScaleType.Flat\r\n        else return ScaleType.Sharp\r\n    }\r\n\r\n}\r\n\r\nexport const notes: Note[] = Object.values(Notes)\r\n","\r\nexport class Interval {\r\n    id\r\n    name\r\n    steps\r\n    standardSymbol\r\n\r\n    constructor(\r\n        name:string,\r\n        steps:number,\r\n        standardSymbol:string\r\n    ) {\r\n        this.name = name\r\n        this.id = name\r\n        this.steps = steps\r\n        this.standardSymbol = standardSymbol\r\n    }\r\n}\r\n\r\nexport class Intervals {\r\n    static PerfectUnison = new Interval(\"unison\", 0, \"root\")\r\n    static MinorSecond = new Interval(\"minorSecond\", 1, \"b9\")\r\n    static MajorSecond = new Interval(\"majorSecond\", 2, \"9\")\r\n    static MinorThird = new Interval(\"minorThird\", 3, \"b3\")\r\n    static MajorThird = new Interval(\"majorThird\", 4, \"3\")\r\n    static PerfectForth = new Interval(\"perfectForth\", 5, \"11\")\r\n    static Tritone = new Interval(\"tritone\", 6, \"b5\")\r\n    static PerfectFifth = new Interval(\"perfectFifth\", 7, \"5\")\r\n    static MinorSixth = new Interval(\"minorSixth\", 8, \"b13\")\r\n    static MajorSixth = new Interval(\"majorSixth\", 9, \"13\")\r\n    static MinorSeventh = new Interval(\"minorSeventh\", 10, \"7\")\r\n    static MajorSeventh = new Interval(\"majorSeventh\", 11, \"Δ\")\r\n}\r\n\r\nexport const intervals = Object.values(Intervals)\r\n\r\n","import { Interval, Intervals } from \"./intervals\"\r\n\r\nexport class Chord {\r\n    id\r\n    intervals\r\n    standardSymbol\r\n\r\n    constructor(\r\n        id: string,\r\n        intervals: Interval[],\r\n        standardSymbol: string,\r\n    ) {\r\n        this.id = id\r\n        this.intervals = intervals\r\n        this.standardSymbol = standardSymbol\r\n    }\r\n}\r\n\r\nexport class Chords {\r\n\r\n    static PerfectUnison = new Chord(\r\n        \"unison\",\r\n        [Intervals.PerfectUnison],\r\n        \"unison\"\r\n    )\r\n    static Minor = new Chord(\"minor\",\r\n        [Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth],\r\n        \"_\"\r\n    )\r\n    static Major = new Chord(\"major\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth],\r\n        \"\"\r\n    )\r\n    static Major7 = new Chord(\"Δ7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSeventh,\r\n    ],\r\n        \"Δ7\"\r\n    )\r\n    static Chord7 = new Chord(\"7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"7\"\r\n    )\r\n    static Minor7 = new Chord(\"_7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"_7\"\r\n    )\r\n    static Minor7b5 = new Chord(\"_7b5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.MinorSeventh,\r\n        Intervals.Tritone],\r\n        \"_7b5\"\r\n    )\r\n    static Chord7b9 = new Chord(\"7b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n        Intervals.MinorSecond\r\n    ],\r\n        \"7b9\"\r\n    )\r\n    static Chord7Sharp5 = new Chord(\"7#5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.MinorSixth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"7#5\"\r\n    )\r\n    static Chord7Sharp11 = new Chord(\"7#11\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.Tritone,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n    ],\r\n        \"7#11\"\r\n    )\r\n    static PowerChord = new Chord(\"5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectFifth],\r\n        \"5\"\r\n    )\r\n    static MajorB13 = new Chord(\"Δ#5\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.MinorSixth,\r\n        Intervals.MajorSeventh],\r\n        \"Δ#5\"\r\n    )\r\n    static Dim7 = new Chord(\"°7\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.Tritone,\r\n        Intervals.MajorSixth],\r\n        \"°7\"\r\n    )\r\n    static b9b13 = new Chord(\"#5b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorSecond,\r\n        Intervals.MajorThird,\r\n        Intervals.MinorSixth],\r\n        \"#5b9\"\r\n    )\r\n    static MinorMajor7 = new Chord(\"_Δ\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSeventh],\r\n        \"_Δ\"\r\n    )\r\n    static Minor6 = new Chord(\"_6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSixth],\r\n        \"_6\"\r\n    )\r\n    static Major6 = new Chord(\"6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSixth],\r\n        \"6\"\r\n    )\r\n    static Minorb6 = new Chord(\"_b6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSixth],\r\n        \"_b6\"\r\n    )\r\n    static Majorb6 = new Chord(\"b6\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSixth],\r\n        \"b6\"\r\n    )\r\n    static Minor9 = new Chord(\"_9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSecond],\r\n        \"_9\"\r\n    )\r\n    static Major9 = new Chord(\"9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MajorSecond],\r\n        \"9\"\r\n    )\r\n    static Minorb9 = new Chord(\"_b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MinorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSecond],\r\n        \"_b9\"\r\n    )\r\n    static Majorb9 = new Chord(\"b9\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.MajorThird,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSecond],\r\n        \"b9\"\r\n    )\r\n    static Sus4 = new Chord(\"7sus4\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectForth,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh],\r\n        \"sus4\"\r\n    )\r\n    static NineSus4 = new Chord(\"79sus4\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectForth,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n        Intervals.MajorSecond],\r\n        \"79sus4\"\r\n    )\r\n    static Major7b6 = new Chord(\"7b13\", [\r\n        Intervals.PerfectUnison,\r\n        Intervals.PerfectForth,\r\n        Intervals.PerfectFifth,\r\n        Intervals.MinorSeventh,\r\n        Intervals.MinorSixth],\r\n        \"7b13\"\r\n    )\r\n\r\n}\r\n\r\nexport const chords : Chord[] = Object.values(Chords)","import { Chord, chords } from \"./chords\";\r\nimport { Note, notes } from \"./notes\";\r\nimport { SpecificScale} from \"./specificScales\";\r\n\r\nexport class SpecificChord {\r\n\r\n    id: string\r\n    name\r\n    chord\r\n    rootNote\r\n    notes\r\n    presentInScales: SpecificScale[] = []\r\n    context?: SpecificScale\r\n\r\n    constructor(rootNote: Note, chord: Chord, context?: SpecificScale) {\r\n        this.rootNote = rootNote\r\n        this.chord = chord\r\n        this.name = rootNote.flat + chord.id\r\n        this.id = rootNote.id + chord.id\r\n        if (context) this.id = this.id + \" context:\" + context?.id\r\n\r\n        this.notes = SpecificChord.calculateNotesForChord(rootNote, chord)\r\n\r\n        this.context = context\r\n    }\r\n\r\n    get step() {\r\n        if (!this.context) return \"\"\r\n        return this.context.notes.indexOf(this.rootNote)\r\n    }\r\n\r\n    get render() {\r\n        if (!this.context) return this.rootNote.flat + this.chord.standardSymbol\r\n        return this.rootNote.render(this.context?.scaleType) + this.chord.standardSymbol \r\n    }\r\n\r\n    private static calculateNotesForChord(rootNote: Note, chord: Chord) {\r\n        const noteIndex = notes.indexOf(rootNote)\r\n        const calcNotes = [...notes.slice(noteIndex), ...notes.slice(0, noteIndex)]\r\n        return chord.intervals.map(interval => calcNotes[interval.steps])\r\n    }\r\n\r\n    public withContext(context: SpecificScale) {\r\n        return new SpecificChord(this.rootNote, this.chord, context)\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n// export const specificChords: SpecificChord[] = generateSpecificChords()\r\n\r\nfunction generateSpecificChords() {\r\n    const result = []\r\n\r\n\r\n    for (const note of notes) {\r\n        for (const chord of chords) {\r\n            result.push(new SpecificChord(note, chord))\r\n        }\r\n    }\r\n\r\n    return result\r\n\r\n}","import { Chords } from \"./chords\";\r\nimport { randomIntFromInterval, withProbability } from \"./helper\";\r\nimport { IRandomConfig } from \"./configs/configs\"\r\n\r\nimport { SpecificChord } from \"./specificChords\";\r\nimport { SpecificScale } from \"./specificScales\";\r\nimport { Part } from \"./part\";\r\n\r\nexport class ChordProgression {\r\n\r\n    chords\r\n    chordsCount\r\n    counter_251\r\n    twoFiveOnes\r\n    constructor(chords: SpecificChord[], counter_251: number, twoFiveOnes: SpecificChord[][]) {\r\n        this.chords = chords\r\n        this.chordsCount = chords.length\r\n        this.counter_251 = counter_251\r\n        this.twoFiveOnes = twoFiveOnes\r\n    }\r\n\r\n}\r\n\r\nexport class ChordProgressionCreator {\r\n\r\n    // This function creates the chord progression that is later mapped to bars (BarsCreator)\r\n\r\n    // Config is evaluated here.\r\n\r\n    // IMPLEMENT CONFIG CONSEQUENCES HERE\r\n    public static createChordProgression(part: Part, config: IRandomConfig) {\r\n\r\n        const scale = part.scale\r\n\r\n        const chords = []\r\n        const twoFiveOnes = []\r\n\r\n\r\n        const barsCount = config.HowManyBars.value\r\n        const maxChordsPerBar = config.MaxChordsPerBar.value\r\n        let counter_251 = 0\r\n\r\n        // Minimum one \r\n        const chordsCount = randomIntFromInterval(barsCount /* / 2 */, (maxChordsPerBar * barsCount))\r\n\r\n        let last;\r\n        while (chords.length < chordsCount) {\r\n\r\n            // 251\r\n            if (withProbability(config.JazzyProgressionness.value, chordsCount >= 3)) {\r\n                // major or minor?\r\n                const major = randomIntFromInterval(0, 1)\r\n                let twoFiveOne = []\r\n                if (major) {\r\n                    twoFiveOne = [\r\n                        scale.getStepTetrad(2),\r\n                        scale.getStepTetrad(5),\r\n                        scale.getStepTetrad(1)\r\n                    ]\r\n                    last = scale.getStepTetrad(1)\r\n                } else {\r\n                    twoFiveOne = [\r\n                        scale.getStepTetrad(7),\r\n                        scale.getStepTetrad(3),\r\n                        scale.getStepTetrad(6)\r\n                    ]\r\n                    last = scale.getStepTetrad(6)\r\n                }\r\n                chords.push(twoFiveOne[0])\r\n                chords.push(twoFiveOne[1])\r\n                chords.push(twoFiveOne[2])\r\n\r\n                console.log(\"added 2 5 1 !\")\r\n                counter_251 = counter_251 + 1\r\n                twoFiveOnes.push(twoFiveOne)\r\n\r\n            }\r\n\r\n            // Random single chord\r\n            let newChord = scale.getRandomTetrad(last)\r\n\r\n            // UseAlwaysMajorThirdOnStep3\r\n            if (newChord.step === 3 && config.UseAlwaysMajorThirdOnStep3.value) {\r\n                newChord = new SpecificChord(newChord.rootNote, Chords.Chord7)\r\n            }\r\n\r\n            last = newChord\r\n\r\n            chords.push(newChord)\r\n\r\n\r\n        }\r\n\r\n        // chords.forEach(chord => chord.)\r\n\r\n        console.log(\"Random chord progression created\", chords)\r\n\r\n        return new ChordProgression(chords, counter_251, twoFiveOnes)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","import { randomFromArray } from \"./helper\"\r\nimport { Interval, intervals, Intervals } from \"./intervals\"\r\n\r\n\r\n\r\nexport class Scale {\r\n\r\n    id\r\n    name\r\n    steps\r\n    modes\r\n\r\n    intervals: Interval[]\r\n\r\n    constructor(id: string, steps: number[], modes?: string[]) {\r\n\r\n        this.id = id\r\n        this.name = id\r\n        this.steps = steps\r\n\r\n        this.modes = modes ?? null\r\n\r\n        const stepsMapped  =[]\r\n        \r\n        let tmp = 0\r\n        for (const step of steps) {\r\n            tmp = step+tmp\r\n            if (intervals[tmp]) {\r\n                stepsMapped.push(intervals[tmp])\r\n            }\r\n        }\r\n\r\n        this.intervals = [\r\n            Intervals.PerfectUnison,\r\n            ...stepsMapped\r\n        ]\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nexport class Scales {\r\n\r\n    static Major = new Scale(\"major\", [2, 2, 1, 2, 2, 2, 1], [\r\n        \"ionisch (dur)\",\r\n        \"dorisch\",\r\n        \"phrygisch\",\r\n        \"lydisch\",\r\n        \"mixolydisch\",\r\n        \"aeolisch (moll)\",\r\n        \"lokrisch\",\r\n    ])\r\n\r\n    static HarmonicMinor = new Scale(\"harmonic minor\", [2, 1, 2, 2, 1, 3, 1], [\r\n        \"harmonic minor mode\",\r\n        \"Locrian 13 or Locrian 6 (half-diminished)\",\r\n        \"Ionian #5 (augmented)\",\r\n        \"Dorian #11 (or dorian #4) (minor)\",\r\n        \"Phrygian dominant (dominant)\",\r\n        \"Lydian #2 (major)\",\r\n        \"Super locrian bb7 (diminished)\",\r\n    ])\r\n\r\n    static MelodicMinor = new Scale(\r\n        \"melodic minor\",\r\n        [2, 1, 2, 2, 2, 2, 1],\r\n        [\r\n            \"melodic minor mode\",\r\n            \"dorisch b9\",\r\n            \"lydisch augmented\",\r\n            \"lydisch dominant / mixo #11\",\r\n            \"mixolydisch b13\",\r\n            \"aeolisch b5 (lokrisch #2)\",\r\n            \"alterierte skala (super lokrisch)\",\r\n        ]\r\n    )\r\n\r\n    static Chromatic = new Scale(\r\n        \"chromatic\",\r\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,],\r\n    )\r\n\r\n    static MinorPentatonic = new Scale(\r\n        \"minor pentatonic\",\r\n        [3, 2, 2, 3, 2],\r\n    )\r\n\r\n    static MajorPentatonic = new Scale(\r\n        \"major pentatonic\",\r\n        [2, 2, 3, 2, 3],\r\n    )\r\n\r\n    static MinorPentatonicBlues = new Scale(\r\n        \"minor blues pentatonic\",\r\n        [3, 2, 1, 1, 3, 2],\r\n    )\r\n\r\n    static MajorPentatonicBlues = new Scale(\r\n        \"major blues pentatonic\",\r\n        [2, 1, 1, 3, 2, 3],\r\n    )\r\n\r\n    static BluesRocknRoll = new Scale(\r\n        \"blues rock n roll\",\r\n        [2, 1, 1, 1, 1, 1, 2, 1, 2],\r\n    )\r\n    \r\n    static BBKingBlues = new Scale(\r\n        \"B.B. King blues\",\r\n        [3, 3, 1, 1, 2],\r\n    )\r\n\r\n    static get Random() {\r\n        return randomFromArray(scales)\r\n    }\r\n\r\n}\r\n\r\nexport const scales : Scale[] = Object.values(Scales)","\r\nimport { Interval, intervals, Intervals } from \"./intervals\";\r\nimport { Note, notes } from \"./notes\";\r\n\r\nexport enum IntervalDirection {\r\n    Up = \"up\",\r\n    Down = \"down\"\r\n}\r\n\r\nexport class SpecificInterval {\r\n\r\n    root\r\n    target\r\n    interval\r\n    direction\r\n\r\n    constructor(root: Note, target: Note, direction = IntervalDirection.Up) {\r\n\r\n        this.root = root\r\n        this.target = target\r\n        this.direction = direction\r\n        this.interval = SpecificInterval.intervalBetweenNotes(root, target, direction)\r\n\r\n    }\r\n\r\n    public static intervalBetweenNotes(root: Note, target: Note, direction: IntervalDirection=IntervalDirection.Up) {\r\n        const rootIndex = notes.indexOf(root)\r\n        const targetIndex = notes.indexOf(target)\r\n\r\n        let interval;\r\n        if (rootIndex === targetIndex) {\r\n            interval = Intervals.PerfectUnison\r\n        } else {\r\n            if (direction === IntervalDirection.Up) {\r\n                if (targetIndex > rootIndex) {\r\n                    interval = intervals[targetIndex - rootIndex]\r\n                } else {\r\n                    interval = intervals[12 - rootIndex + targetIndex]\r\n                }\r\n            } else {\r\n                if (targetIndex > rootIndex) {\r\n                    interval = intervals[rootIndex + (12 - targetIndex)]\r\n                } else {\r\n                    interval = intervals[rootIndex - targetIndex]\r\n                }\r\n            }\r\n        }\r\n        return interval\r\n    }\r\n    public static calculateInterval(rootNote:Note,interval:Interval) {\r\n        const noteIndex = notes.indexOf(rootNote)\r\n        const calcNotes = [...notes.slice(noteIndex), ...notes.slice(0, noteIndex)]\r\n        return calcNotes[interval.steps]\r\n\r\n\r\n    }\r\n\r\n\r\n} ","\r\nimport { chords, Chords } from \"./chords\"\r\nimport { getScaleFromNote, randomFromArray, randomIntFromInterval } from \"./helper\"\r\nimport { Interval, Intervals } from \"./intervals\"\r\nimport { Note, notes, Notes } from \"./notes\"\r\nimport { Scale, scales, Scales } from \"./scales\"\r\nimport { SpecificChord } from \"./specificChords\"\r\nimport { SpecificInterval } from \"./specificIntervals\"\r\n\r\n\r\nexport class SpecificScales {\r\n\r\n    get Random() {\r\n        return new SpecificScale(Notes.Random, Scales.Major)\r\n    }\r\n\r\n}\r\n\r\nexport class SpecificScale {\r\n\r\n    rootNote\r\n    scale\r\n    mode\r\n\r\n    notes\r\n    // chords?\r\n\r\n    name\r\n    id\r\n    scaleType\r\n\r\n    // triads\r\n    tetrads\r\n    // basicScale\r\n\r\n    get rootNoteName() {\r\n        return this.rootNote.render(this.scaleType)\r\n    }\r\n\r\n    constructor(\r\n        rootNote: Note = Notes.Random,\r\n        scale: Scale = Scales.Major,\r\n        mode = 0) {\r\n\r\n        this.scale = scale\r\n        this.rootNote = rootNote\r\n        this.mode = mode\r\n        this.id = rootNote.id + \" \" + scale.id + \" mode: \" + mode\r\n        this.name = rootNote.id + \" \" + (!scale.modes ? scale.id : scale.modes[mode])\r\n\r\n        this.scaleType = Notes.scaleType(rootNote)\r\n\r\n        // this.notes = calculateScaleNotes(rootNote, scale, mode)\r\n        this.notes = this.calculateScaleNotes(rootNote, scale, mode)\r\n\r\n        this.tetrads = this.addTetrads(this.notes)\r\n\r\n        if (mode && scale.modes === null) {\r\n            console.error(\"Mode not present in scale\", { rootNote, scale, mode })\r\n            return\r\n        }\r\n\r\n    }\r\n\r\n    private calculateScaleNotes(rootNote: Note, scale: Scale, mode: number) {\r\n\r\n\r\n        const calcNotes = getScaleFromNote(rootNote, notes)\r\n\r\n        return scale.intervals.map(interval => {\r\n            // if (interval === undefined) {\r\n            //     console.log(scale, interval)\r\n            //     debugger\r\n            // }\r\n            return calcNotes[interval.steps]\r\n        })\r\n\r\n    }\r\n\r\n    private addTetrads(scaleNotes: Note[]) {\r\n\r\n        const tetrads = [\r\n            Chords.Major7,\r\n            Chords.Chord7,\r\n            Chords.Minor7,\r\n            Chords.Minor7b5\r\n        ]\r\n\r\n        const res = []\r\n        for (const note of scaleNotes) {\r\n            // const chords = specificChords\r\n\r\n            //     // Alle Vierklänge herausfinden\r\n            //     .filter(chord => chord.rootNote === note)\r\n            //     .filter(chord => tetrads.includes(chord.chord))\r\n            //     .filter(chord => chord.notes.every(note => scaleNotes.includes(note)))\r\n\r\n            // Get tetrad notes\r\n            const chordIntervals = getScaleFromNote(note, scaleNotes).filter((note, i) => i === 0 || i === 2 || i === 4 || i === 6)\r\n            // filter to intervals\r\n            .map(chordNote => SpecificInterval.intervalBetweenNotes(note, chordNote))\r\n\r\n            let foundChord;\r\n            for (const chord of chords) {\r\n                if (chordIntervals.every(interval => chord.intervals.includes(interval))) {\r\n                    foundChord = chord\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundChord) {\r\n                const specificChord = new SpecificChord(note, foundChord, this)\r\n                res.push(specificChord)\r\n                \r\n            } else {\r\n                console.error(\"Tetrad not found\", {this:this, note, scaleNotes, chordIntervals})\r\n                \r\n            }\r\n\r\n        }\r\n        return res\r\n\r\n    }\r\n\r\n    get RandomNote() {\r\n        return randomFromArray(this.notes)\r\n    }\r\n    get RandomTetrad() {\r\n        return randomFromArray(this.tetrads)\r\n    }\r\n\r\n    getRandomTetrad(not?:SpecificChord) : SpecificChord {\r\n        return randomFromArray(this.tetrads, [not])\r\n\r\n    }\r\n\r\n    get FifthJump() {\r\n        const newRoot = SpecificInterval.calculateInterval(this.rootNote, Intervals.PerfectFifth)\r\n        return new SpecificScale(newRoot, this.scale)\r\n    }\r\n    get FourthJump() {\r\n        const newRoot = SpecificInterval.calculateInterval(this.rootNote, Intervals.PerfectForth)\r\n        return new SpecificScale(newRoot, this.scale)\r\n    }\r\n\r\n    getStepTetrad(step: number) {\r\n        if (step > 7 || step < 0) {\r\n            console.error(\"Warning, cant geht this step tetrad\", { step, scale: this })\r\n            return this.tetrads[0]\r\n        }\r\n        return this.tetrads[step - 1]\r\n    }\r\n\r\n    getCloseCircleOfFifthsScale(maxCloseness: number) {\r\n\r\n        const n = randomIntFromInterval(1, maxCloseness)\r\n\r\n        // jump fifths or fourths\r\n        const jumpFifhts = randomIntFromInterval(0, 100) < 50\r\n\r\n        let result = this as SpecificScale\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            result = jumpFifhts ? result.FifthJump : result.FourthJump\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    get RandomProgression() {\r\n        const bars = 4 //randomIntFromInterval(2, 6)\r\n        const maxPerBar = 2\r\n\r\n        const progression = []\r\n\r\n        let last\r\n        for (let i = 0; i < bars; i++) {\r\n\r\n            const bar: SpecificChord | null[] = []\r\n            progression.push(bar)\r\n\r\n            for (let j = 0; j < maxPerBar; j++) {\r\n\r\n                const randomNess = randomIntFromInterval(0, 100)\r\n                if (randomNess < 50 && j !== 0) {\r\n                    bar.push(null)\r\n                } else {\r\n                    const next = randomFromArray(this.tetrads, [last])\r\n                    bar.push(next)\r\n                    last = next\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return progression\r\n\r\n\r\n    }\r\n\r\n}\r\n// export const specificScales = generateSpecificScales()\r\n\r\n\r\nfunction generateSpecificScales() {\r\n    const result = []\r\n\r\n\r\n    for (const note of notes) {\r\n        for (const scale of scales) {\r\n            result.push(new SpecificScale(note, scale))\r\n        }\r\n    }\r\n\r\n    return result\r\n\r\n}","\r\n\r\n// a part:\r\n\r\n\r\nimport { Subject } from \"rxjs\"\r\nimport { ISubscribable } from \"../components/useRerenderOnSubscribableChange\"\r\nimport { Bar, BarsCreator } from \"./bar\"\r\nimport { IRandomConfig, SubscribableRandomConfig } from \"./configs/configs\"\r\n\r\nimport { Notes } from \"./notes\"\r\nimport { ChordProgressionCreator } from \"./progressions\"\r\nimport { Scales } from \"./scales\"\r\n\r\nimport { SpecificScale } from \"./specificScales\"\r\n\r\n\r\n\r\nexport class Part implements ISubscribable {\r\n\r\n    scale: SpecificScale\r\n    bars: Bar[]\r\n    chordProgression\r\n    onChange = new Subject()\r\n    index: number\r\n    lastPart\r\n\r\n    subscribableConfig = new SubscribableRandomConfig()\r\n\r\n    // We need the last part to get the new scale (circle of fifth closeness).\r\n    constructor(lastPart: Part | null, index: number) {\r\n\r\n        this.index = index\r\n        this.lastPart = lastPart\r\n        // Here we say: When a config changes, redo the whole create tune procedure!\r\n        // The same rerender structure ist used for the userInputs And \r\n        this.subscribableConfig.onChange.subscribe(() => {\r\n            this.init()\r\n\r\n            // The part can be subscribed by the rendering.\r\n            this.onChange.next(this)\r\n        })\r\n\r\n        // Change if last part changed and DEPENDENCYS\r\n        if (lastPart) {\r\n            lastPart.onChange.subscribe(() => {\r\n                this.init()\r\n\r\n                this.onChange.next(null)\r\n            })\r\n        }\r\n\r\n        // initiate with random, we run init() anyways\r\n        const config = this.subscribableConfig.config\r\n        this.scale = new SpecificScale(Notes.Random, Scales.Major)\r\n        this.chordProgression = ChordProgressionCreator.createChordProgression(this, config)\r\n        this.bars = BarsCreator.mapChordsToBars(this.chordProgression, config)\r\n\r\n        this.init()\r\n\r\n\r\n        // for (let i = 0; i < config.HowManyBars; i++) {\r\n        //     this.bars.push(new Bar(lastPart, this, config))\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    init() {\r\n        const config = this.subscribableConfig.config\r\n\r\n        const lastPart = this.lastPart\r\n        // Determine the scale of the part.\r\n        // Currently only circle of fifth and regular major keys\r\n        if (lastPart && config.KeyChange.value === false) {\r\n            this.scale = lastPart.scale\r\n        } else if (!lastPart) {\r\n            this.scale = new SpecificScale(Notes.Random, Scales.Major)\r\n        } else {\r\n            this.scale = lastPart.scale.getCloseCircleOfFifthsScale(config.CircleOfFifthMaxCloseness.value)\r\n        }\r\n\r\n        this.chordProgression = ChordProgressionCreator.createChordProgression(this, config)\r\n        this.bars = BarsCreator.mapChordsToBars(this.chordProgression, config)\r\n        this.onChange.next(0)\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","\r\nimport { Subject } from \"rxjs\";\r\nimport { ISubscribable } from \"../components/useRerenderOnSubscribableChange\";\r\nimport { BarChords } from \"./bar\";\r\nimport { BpmRunner } from \"./BpmRunner\";\r\nimport { randomIntFromInterval } from \"./helper\";\r\nimport { Part  } from \"./part\";\r\n\r\n\r\n// global settings:\r\n\r\n// how many parts\r\n// how many key changes\r\n// start key\r\n// bpm\r\n// part repetition / order\r\n\r\nexport enum PartIndex {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n}\r\n\r\n\r\nexport class Tune implements  ISubscribable {\r\n\r\n    onChange = new Subject<any>()\r\n\r\n    parts: Part[] = []\r\n    partOrder:number[]\r\n\r\n\r\n    get partsInOrder() : Part[] {\r\n        return this.partOrder.map(i => {\r\n            return this.parts[i]\r\n        })\r\n    }\r\n\r\n    public rebuildParts() {\r\n        this.parts.forEach(part => part.init())\r\n        this.onChange.next(0)\r\n    }\r\n\r\n    public randomPartsOrder(howMany:number=8) {\r\n\r\n        const newPartsOrder = []\r\n        for (let i = 0;i<howMany;i++) {\r\n            newPartsOrder.push(randomIntFromInterval(0,2))\r\n        }\r\n        this.partOrder = newPartsOrder\r\n        this.rebuildParts()\r\n\r\n    }\r\n\r\n    constructor() {\r\n        this.addPart()\r\n        this.addPart()\r\n        this.addPart()\r\n        this.partOrder = [\r\n            PartIndex.A,\r\n            PartIndex.A,\r\n            PartIndex.B,\r\n            PartIndex.C,\r\n        ]\r\n    }\r\n\r\n    public setPartOrder(array:number[]) {\r\n        this.partOrder = array\r\n        this.onChange.next(0)\r\n    }\r\n\r\n    addPart() {\r\n        const newPart =  new Part(this.parts[this.parts.length-1], this.parts.length)\r\n        this.parts = [...this.parts, newPart]\r\n\r\n        // Propagate part change further to tune change\r\n        newPart.onChange.subscribe(this.onChange)\r\n    }\r\n\r\n    removePart(part: Part) {\r\n        this.parts = this.parts.filter(p => part !== p)\r\n    }\r\n\r\n\r\n\r\n\r\n}","\r\nimport { BpmRunner } from \"./BpmRunner\";\r\nimport { Tune } from \"./tune\";\r\n\r\n\r\nclass MainControllerSingleton {\r\n\r\n    tune = new Tune()\r\n\r\n    constructor() {\r\n\r\n        console.log(this.tune)\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nconst MainController =  new MainControllerSingleton()\r\n\r\nexport default MainController","import { useEffect, useState } from \"react\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n\r\nexport interface ISubscribable {\r\n    onChange: Subject<any>\r\n}\r\n\r\n\r\nexport function useRerenderOnSubscribableChange(subscribable: ISubscribable) {\r\n\r\n    const [counter, setCounter] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n\r\n        if (subscribable) {\r\n            const sub = subscribable.onChange.subscribe(() => {\r\n                // console.log(\"rerender\", subscribable)\r\n                setCounter((counter + 1))\r\n            })\r\n            return () => sub.unsubscribe()\r\n        }\r\n\r\n    }, [subscribable, counter, setCounter])\r\n\r\n\r\n\r\n    return counter\r\n\r\n}","\r\n\r\nimport { SettingName } from \"../../defs/configs/configs\"\r\nimport { ConfigValue, ConfigValueSetting, NumberSetting, Setting, SettingType } from \"../../defs/configs/settings\"\r\nimport { createNumberArray, kebabize } from \"../../defs/helper\"\r\nimport MainController from \"../../defs/mainController\"\r\nimport { Part } from \"../../defs/part\"\r\nimport { useRerenderOnSubscribableChange } from \"../useRerenderOnSubscribableChange\"\r\nimport classes from \"./PartConfig.module.css\"\r\n\r\ninterface IPartConfigProps {\r\n    part: Part\r\n}\r\n\r\nexport default function PartConfig(props: IPartConfigProps) {\r\n\r\n    const part = props.part\r\n    const config = part.subscribableConfig.config\r\n\r\n    useRerenderOnSubscribableChange(part)\r\n\r\n    // Rerender on config change\r\n    useRerenderOnSubscribableChange(part.subscribableConfig)\r\n\r\n\r\n    return <div className={classes.container}>\r\n\r\n        <button onClick={e => part.init()}>Rebuild</button>\r\n\r\n        {config.entries.map(entry => {\r\n\r\n            const [name, setting] = entry\r\n\r\n            if (part.index === 0 && setting.name === SettingName.CircleOfFifthMaxCloseness) return null\r\n            if (part.index === 0 && setting.name === SettingName.KeyChange) return null\r\n\r\n            return <div className={classes.setting}>\r\n\r\n                <div className={classes.name}>\r\n\r\n                    {kebabize(name).replaceAll(\"-\", \" \")}\r\n\r\n                </div>\r\n\r\n                <div className={classes.input}>\r\n\r\n                    {setting.type === SettingType.BooleanSetting\r\n                        &&\r\n\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={setting.value as boolean}\r\n                            onChange={e => {\r\n                                setting.value = e.target.checked\r\n                            }}\r\n\r\n                        ></input>\r\n\r\n                    }\r\n\r\n                    {setting.type === SettingType.ConfigValueSetting\r\n                        &&\r\n\r\n                        <select onChange={e => setting.value = e.target.value as ConfigValue} value={setting.value as string}>\r\n                            {Object.values(ConfigValue).map(value => {\r\n                                return <option key={value}>{value}</option>\r\n                            })}\r\n                        </select>\r\n\r\n                    }\r\n\r\n                    {setting.type === SettingType.NumberSetting\r\n                        &&\r\n\r\n                        <select onChange={e => setting.value = parseFloat(e.target.value)} value={setting.value.toString()}>\r\n                            {createNumberArray((setting as unknown as NumberSetting).min, (setting as unknown as NumberSetting).max).map(value => {\r\n                                return <option key={value.toString()}>{value}</option>\r\n                            })}\r\n                        </select>\r\n\r\n                    }\r\n\r\n                </div>\r\n\r\n                <div className={classes.info}>\r\n                \r\n                    {setting.name === SettingName.JazzyProgressionness && part.chordProgression.counter_251}\r\n                \r\n                </div>\r\n\r\n            </div>\r\n\r\n        })}\r\n\r\n        <div className={classes.resultName}>\r\n        \r\n\r\n        { \"Result: \"+part.scale.name}\r\n\r\n        </div>\r\n\r\n        <div className={classes.result}>\r\n        \r\n            {part.bars.map(bar => {\r\n                return <div className={classes.bar}>\r\n                \r\n                    {bar.chords.map(chord => {\r\n                        return <div className={classes.chord}>\r\n                        \r\n                            {chord && chord.step + \" - \"}\r\n                            {chord && chord.render}\r\n                        \r\n                        </div>\r\n                    })}\r\n                \r\n                </div>\r\n            })}\r\n        \r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import { Subject } from \"rxjs\";\r\nimport { ISubscribable } from \"../components/useRerenderOnSubscribableChange\";\r\n\r\nfunction getTimeInterval(bpm: number) {\r\n    return (60 / bpm) * 1000;\r\n}\r\n\r\n\r\nexport class BpmRunner implements ISubscribable {\r\n    private _renderCount = 0\r\n    private _bpm: number = 60\r\n    private _timeInterval: number = getTimeInterval(this._bpm)\r\n    private _runningInterval: NodeJS.Timeout | undefined;\r\n    onChange = new Subject<number>()\r\n\r\n    private _beforeNext\r\n\r\n    constructor(bpm: number = 60, beforeNext: () => void) {\r\n\r\n        this._beforeNext = beforeNext\r\n        this.bpm = bpm\r\n        this._startInterval()\r\n    }\r\n\r\n    public resetRenderCount() {\r\n        this._renderCount = 0\r\n    }\r\n\r\n    public stop() {\r\n        if (this._runningInterval) {\r\n            clearInterval(this._runningInterval)\r\n        }\r\n    }\r\n\r\n    private _rerender() {\r\n        this._renderCount = this._renderCount + 1\r\n        this.onChange.next(this._renderCount)\r\n    }\r\n\r\n\r\n    public get bpm() {\r\n        return this._bpm\r\n    }\r\n\r\n    public getPosition(barsCount: number, chordsPerBar: number) {\r\n        const allPositions = barsCount * chordsPerBar\r\n        const position = this._renderCount % allPositions\r\n\r\n\r\n        let counter = 0\r\n        while (counter < allPositions) {\r\n\r\n            if (counter === position || (counter < position && (counter+chordsPerBar)>position) ) {\r\n\r\n                const isLastOne = position === allPositions-1\r\n\r\n                const chordInBar = position - counter\r\n                const result = {\r\n                    bar:counter/chordsPerBar,\r\n                    chordInBar:chordInBar,\r\n                    isLastOne\r\n                }\r\n                return result\r\n            }\r\n\r\n            counter = counter + chordsPerBar\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    public set bpm(bpm: number) {\r\n        this._bpm = bpm\r\n        this._timeInterval = getTimeInterval(bpm)\r\n        this._startInterval()\r\n        this._rerender()\r\n\r\n    }\r\n\r\n    private _startInterval() {\r\n        if (this._runningInterval) {\r\n            clearInterval(this._runningInterval)\r\n        }\r\n\r\n        this._runningInterval = setInterval(() => {\r\n            this._beforeNext()\r\n            this._rerender()\r\n\r\n        }, this._timeInterval)\r\n    }\r\n\r\n}","import { Bar } from \"../../defs/bar\"\r\nimport { BpmRunner } from \"../../defs/BpmRunner\"\r\nimport MainController from \"../../defs/mainController\"\r\nimport { useRerenderOnSubscribableChange } from \"../useRerenderOnSubscribableChange\"\r\nimport classes from \"./Sheet.module.css\"\r\n\r\nlet runner = new BpmRunner(40, ()=>{\r\n    // console.log(\"rerender runner\")\r\n})\r\n\r\nexport default function Sheet() {\r\n\r\n    useRerenderOnSubscribableChange(MainController.tune)\r\n\r\n    const tune = MainController.tune\r\n\r\n    useRerenderOnSubscribableChange(runner)\r\n\r\n    \r\n    const bars :Bar[] = tune.partsInOrder.map(part => {\r\n        return part.bars\r\n    }).reduce((prev, next) => prev.concat(next))\r\n    \r\n    const position =  runner.getPosition(bars.length, tune.parts[0].subscribableConfig.config.MaxChordsPerBar.value)\r\n    \r\n    console.log(position)\r\n    // if (position?.isLastOne) {\r\n    //     tune.randomPartsOrder()\r\n    //     runner.resetRenderCount()\r\n    // }\r\n\r\n    return <div className={classes.container}>\r\n\r\n        {/* {(position && position?.bar) + \" - \"+ (position && position?.chordInBar)} */}\r\n    \r\n        {bars.map((bar, i) => {\r\n            return <div className={classes.bar}>\r\n            \r\n\r\n            \r\n                {bar.chords.map((chord, j) => {\r\n\r\n                    const isCurrentPosition = position && position.bar === i && position.chordInBar === j\r\n                    \r\n                    return <div className={classes.chord}>\r\n                        \r\n\r\n                        {chord?.render}\r\n                    \r\n                        <div className={classes.currentPosition}\r\n                            style={{\r\n                                display:isCurrentPosition ? \"\" : \"none\"\r\n                            }}\r\n                        />\r\n\r\n                    </div>\r\n                })}\r\n            \r\n            </div>\r\n        })}\r\n    \r\n\r\n    </div>\r\n\r\n}","import { Tune } from \"../../defs/tune\"\r\nimport { useRerenderOnSubscribableChange } from \"../useRerenderOnSubscribableChange\"\r\nimport classes from \"./Tune.module.css\"\r\n\r\ninterface ITuneProps {\r\n    tune:Tune\r\n}\r\n\r\n\r\nexport default function TuneRender(props:ITuneProps) {\r\n\r\n    const tune = props.tune\r\n\r\n    useRerenderOnSubscribableChange(tune)\r\n\r\n    return <div className={classes.container}>\r\n    \r\n            {tune.partsInOrder.map((part, i) => {\r\n                \r\n                return <div className={classes.part}>\r\n                    \r\n                    part: {part.index} {part.scale.rootNoteName}\r\n                    \r\n                    <div className={classes.bars}>\r\n                    \r\n                        <div className={classes.bar}>\r\n                        \r\n                            {part.bars.map(bar => {\r\n                                return <div className={classes.bar}>\r\n\r\n                                    |\r\n                                \r\n                                    <div className={classes.chords}>\r\n                                    \r\n                                        {bar.chords.map(chord => {\r\n                                            return <div className={classes.chord}>\r\n                                            \r\n                                                {chord?.render}\r\n                                            \r\n                                            </div>\r\n                                        })}\r\n                                    \r\n                                    </div>\r\n                                \r\n                                </div>\r\n                            })}\r\n                        \r\n                        </div>\r\n                    \r\n                    </div>\r\n                \r\n                </div>\r\n\r\n\r\n            })}\r\n\r\n    \r\n    </div>\r\n\r\n}","import { useState } from \"react\"\r\nimport MainController from \"../../defs/mainController\"\r\nimport PartConfig from \"../PartConfig/PartConfig\"\r\nimport Sheet from \"../Sheet/Sheet\"\r\nimport TuneRender from \"../Tune/Tune\"\r\nimport { useRerenderOnSubscribableChange } from \"../useRerenderOnSubscribableChange\"\r\nimport classes from \"./main.module.css\"\r\n\r\n\r\nexport default function Main() {\r\n\r\n    const [partsString, setPartsString] = useState(MainController.tune.partOrder.toString().replaceAll(\",\", \"\"))\r\n\r\n    useRerenderOnSubscribableChange(MainController.tune)\r\n\r\n    // if (MainController.tune.partOrder.toString().replaceAll(\",\", \"\") !== partsString) {\r\n    //     setPartsString(MainController.tune.partOrder.toString().replaceAll(\",\", \"\"))\r\n    // }\r\n\r\n    return <div className={classes.container}>\r\n\r\n\r\n\r\n        <div className={classes.headBar}>\r\n\r\n\r\n            <div className={classes.order}>\r\n\r\n                parts order:\r\n\r\n            </div>\r\n\r\n            <input type=\"string\"\r\n                value={partsString}\r\n                onChange={e => setPartsString(e.target.value)}\r\n                onBlur={e => {\r\n                    const newPartOrder = partsString.split(\"\").map(s => parseFloat(s))\r\n                    MainController.tune.setPartOrder(newPartOrder)\r\n                }}\r\n            />\r\n\r\n            <button onClick={e => MainController.tune.randomPartsOrder()}>Random</button>\r\n\r\n            {MainController.tune.partOrder.toString().replaceAll(\",\", \"\")}\r\n\r\n        </div>\r\n\r\n        <div className={classes.row}>\r\n\r\n\r\n\r\n\r\n            <div className={classes.parts}>\r\n\r\n                {MainController.tune.parts.map(part => {\r\n\r\n                    return <PartConfig part={part} />\r\n\r\n                })}\r\n\r\n            </div>\r\n\r\n            <div className={classes.tune}>\r\n\r\n                <TuneRender tune={MainController.tune} />\r\n                <Sheet></Sheet>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Main from './components/Main/Main';\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <Main></Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <App />,\r\n  // {/* </React.StrictMode>, */}\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PartConfig_container__qrcuB\",\"setting\":\"PartConfig_setting__3aY73\",\"name\":\"PartConfig_name__1o7ea\",\"result\":\"PartConfig_result__1K1ij\",\"bar\":\"PartConfig_bar__21CMQ\",\"chord\":\"PartConfig_chord__1r-6b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tune_container__2HqJH\",\"part\":\"Tune_part__1UB1U\",\"bar\":\"Tune_bar__381hH\",\"chords\":\"Tune_chords__3IthB\",\"chord\":\"Tune_chord__34Ys-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"main_container__vs8-i\",\"headBar\":\"main_headBar__2SXTL\",\"order\":\"main_order__gAGBr\",\"row\":\"main_row__2QUd-\",\"parts\":\"main_parts__1d5LZ\",\"tune\":\"main_tune__1TQXp\"};"],"sourceRoot":""}